/**
 * Serveur principal de l'application EuroMillions
 */
const express = require('express');
const cors = require('cors');
const morgan = require('morgan');
const helmet = require('helmet');
const path = require('path');
const fs = require('fs');
const config = require('./config');
const logger = require('./utils/logger');
const routes = require('./routes');
const errorHandler = require('./middleware/errorHandler');
//const rateLimit = require('./middleware/rateLimit');
const dbService = require('./services/dbService');

// Initialiser l'application Express
const app = express();

// Middleware de base
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Middleware de sécurité
app.use(helmet({
  contentSecurityPolicy: {
    directives: {
      defaultSrc: ["'self'"],
      scriptSrc: ["'self'", "'unsafe-inline'", "https://cdn.jsdelivr.net"],
      styleSrc: ["'self'", "'unsafe-inline'", "https://cdn.jsdelivr.net"],
      imgSrc: ["'self'", "data:"],
      connectSrc: ["'self'", "http://localhost:3000"]
    }
  }
}));

// CORS
app.use(cors());

// Configurer le logging
if (config.env === 'development') {
  app.use(morgan('dev'));
} else {
  // Créer le répertoire de logs s'il n'existe pas
  const logsDir = path.join(__dirname, 'logs');
  if (!fs.existsSync(logsDir)) {
    fs.mkdirSync(logsDir, { recursive: true });
  }
  
  // Logger les requêtes dans un fichier en production
  const accessLogStream = fs.createWriteStream(
    path.join(logsDir, 'access.log'),
    { flags: 'a' }
  );
  app.use(morgan('combined', { stream: accessLogStream }));
}

// Servir les fichiers statiques du frontend
app.use(express.static(path.join(__dirname, '../frontend/build')));

// Routes API
app.use('/api', routes);

// Redirection de toutes les autres routes vers l'application frontend
app.get('*', (req, res) => {
  res.sendFile(path.join(__dirname, '../frontend/build/index.html'));
});

// Middleware de gestion d'erreurs
app.use(errorHandler);

// Initialiser la base de données et démarrer le serveur
async function startServer() {
  try {
    // Initialiser la base de données
    await dbService.init();
    
    // Démarrer le serveur
    const PORT = config.port;
    app.listen(PORT, () => {
      logger.info(`Serveur démarré sur le port ${PORT}`);
      logger.info(`Mode: ${config.env}`);
    });
    
    // Gérer la fermeture propre
    process.on('SIGINT', async () => {
      logger.info('Arrêt du serveur...');
      await dbService.close();
      process.exit(0);
    });
    

  } catch (error) {
    logger.error('Erreur lors du démarrage du serveur:', error);
    process.exit(1);
  }
}

// Démarrer le serveur
startServer();

module.exports = app; // Pour les tests
