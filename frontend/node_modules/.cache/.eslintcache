[{"C:\\Users\\Rga\\euromillions-app\\frontend\\src\\index.js":"1","C:\\Users\\Rga\\euromillions-app\\frontend\\src\\App.js":"2","C:\\Users\\Rga\\euromillions-app\\frontend\\src\\pages\\Statistics.js":"3","C:\\Users\\Rga\\euromillions-app\\frontend\\src\\pages\\Dashboard.js":"4","C:\\Users\\Rga\\euromillions-app\\frontend\\src\\components\\common\\Footer.js":"5","C:\\Users\\Rga\\euromillions-app\\frontend\\src\\components\\common\\Header.js":"6","C:\\Users\\Rga\\euromillions-app\\frontend\\src\\components\\common\\ThemeToggle.js":"7","C:\\Users\\Rga\\euromillions-app\\frontend\\src\\pages\\SavedGrids.js":"8","C:\\Users\\Rga\\euromillions-app\\frontend\\src\\pages\\GenerateGrid.js":"9","C:\\Users\\Rga\\euromillions-app\\frontend\\src\\components\\common\\Sidebar.js":"10","C:\\Users\\Rga\\euromillions-app\\frontend\\src\\components\\common\\LotteryBall.js":"11","C:\\Users\\Rga\\euromillions-app\\frontend\\src\\services\\gridService.js":"12","C:\\Users\\Rga\\euromillions-app\\frontend\\src\\components\\grids\\GridCard.js":"13","C:\\Users\\Rga\\euromillions-app\\frontend\\src\\components\\grids\\GridGenerator.js":"14","C:\\Users\\Rga\\euromillions-app\\frontend\\src\\redux\\actions\\gridActions.js":"15","C:\\Users\\Rga\\euromillions-app\\frontend\\src\\services\\apiService.js":"16","C:\\Users\\Rga\\euromillions-app\\frontend\\src\\redux\\types.js":"17","C:\\Users\\Rga\\euromillions-app\\frontend\\src\\utils\\toast.js":"18","C:\\Users\\Rga\\euromillions-app\\frontend\\src\\i18n\\index.js":"19","C:\\Users\\Rga\\euromillions-app\\frontend\\src\\redux\\actions\\drawActions.js":"20","C:\\Users\\Rga\\euromillions-app\\frontend\\src\\redux\\store.js":"21","C:\\Users\\Rga\\euromillions-app\\frontend\\src\\redux\\reducers\\index.js":"22","C:\\Users\\Rga\\euromillions-app\\frontend\\src\\redux\\reducers\\drawReducer.js":"23","C:\\Users\\Rga\\euromillions-app\\frontend\\src\\redux\\reducers\\gridReducer.js":"24","C:\\Users\\Rga\\euromillions-app\\frontend\\src\\redux\\actions\\statActions.js":"25","C:\\Users\\Rga\\euromillions-app\\frontend\\src\\redux\\reducers\\statReducer.js":"26","C:\\Users\\Rga\\euromillions-app\\frontend\\src\\pages\\DrawHistory.js":"27","C:\\Users\\Rga\\euromillions-app\\frontend\\src\\pages\\Predictions.js":"28","C:\\Users\\Rga\\euromillions-app\\frontend\\src\\pages\\Settings.js":"29","C:\\Users\\Rga\\euromillions-app\\frontend\\src\\redux\\actions\\predictionActions.js":"30","C:\\Users\\Rga\\euromillions-app\\frontend\\src\\redux\\reducers\\predictionReducer.js":"31"},{"size":534,"mtime":1744149036403,"results":"32","hashOfConfig":"33"},{"size":2389,"mtime":1744147005904,"results":"34","hashOfConfig":"33"},{"size":1216,"mtime":1744149363487,"results":"35","hashOfConfig":"33"},{"size":5370,"mtime":1744149068163,"results":"36","hashOfConfig":"33"},{"size":905,"mtime":1744147402419,"results":"37","hashOfConfig":"33"},{"size":2367,"mtime":1744147632846,"results":"38","hashOfConfig":"33"},{"size":2152,"mtime":1744147795215,"results":"39","hashOfConfig":"33"},{"size":13738,"mtime":1744147231248,"results":"40","hashOfConfig":"33"},{"size":9000,"mtime":1744152153076,"results":"41","hashOfConfig":"33"},{"size":4199,"mtime":1744149549841,"results":"42","hashOfConfig":"33"},{"size":1028,"mtime":1744151903740,"results":"43","hashOfConfig":"33"},{"size":4374,"mtime":1744151638972,"results":"44","hashOfConfig":"33"},{"size":3265,"mtime":1744151871489,"results":"45","hashOfConfig":"33"},{"size":6102,"mtime":1744127755547,"results":"46","hashOfConfig":"33"},{"size":1852,"mtime":1744126700522,"results":"47","hashOfConfig":"33"},{"size":783,"mtime":1744149000895,"results":"48","hashOfConfig":"33"},{"size":2007,"mtime":1744148527120,"results":"49","hashOfConfig":"33"},{"size":793,"mtime":1744147062956,"results":"50","hashOfConfig":"33"},{"size":484,"mtime":1744150056333,"results":"51","hashOfConfig":"33"},{"size":2753,"mtime":1744148584796,"results":"52","hashOfConfig":"33"},{"size":561,"mtime":1744148930408,"results":"53","hashOfConfig":"33"},{"size":369,"mtime":1744149816973,"results":"54","hashOfConfig":"33"},{"size":1389,"mtime":1744148808036,"results":"55","hashOfConfig":"33"},{"size":2261,"mtime":1744126772456,"results":"56","hashOfConfig":"33"},{"size":1818,"mtime":1744149203197,"results":"57","hashOfConfig":"33"},{"size":732,"mtime":1744149258635,"results":"58","hashOfConfig":"33"},{"size":3706,"mtime":1744149417958,"results":"59","hashOfConfig":"33"},{"size":1619,"mtime":1744149782359,"results":"60","hashOfConfig":"33"},{"size":1642,"mtime":1744149510892,"results":"61","hashOfConfig":"33"},{"size":1451,"mtime":1744149744896,"results":"62","hashOfConfig":"33"},{"size":763,"mtime":1744149699983,"results":"63","hashOfConfig":"33"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},"73vas2",{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"66"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"66"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"66"},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"66"},{"filePath":"109","messages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"113","messages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"115","messages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"118","messages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"66"},{"filePath":"121","messages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"123","messages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"125","messages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"66"},{"filePath":"128","messages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"130","messages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"66"},{"filePath":"133","messages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},"C:\\Users\\Rga\\euromillions-app\\frontend\\src\\index.js",[],["135","136"],"C:\\Users\\Rga\\euromillions-app\\frontend\\src\\App.js",["137"],"import React, { useState, useEffect } from 'react';\r\nimport { Routes, Route, Navigate } from 'react-router-dom';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\n// Layout Components\r\nimport Header from './components/common/Header';\r\nimport Sidebar from './components/common/Sidebar';\r\nimport Footer from './components/common/Footer';\r\nimport ThemeToggle from './components/common/ThemeToggle';\r\n\r\n// Pages\r\nimport Dashboard from './pages/Dashboard';\r\nimport DrawHistory from './pages/DrawHistory';\r\nimport GenerateGrid from './pages/GenerateGrid';\r\nimport SavedGrids from './pages/SavedGrids'; // Nouvelle page ajoutée\r\nimport Predictions from './pages/Predictions';\r\nimport Statistics from './pages/Statistics';\r\nimport Settings from './pages/Settings';\r\n\r\n// Actions\r\nimport { fetchLatestDraws } from './redux/actions/drawActions';\r\n\r\nconst App = () => {\r\n  const [sidebarOpen, setSidebarOpen] = useState(false);\r\n  const dispatch = useDispatch();\r\n  const { t } = useTranslation();\r\n\r\n  useEffect(() => {\r\n    // Charger les derniers tirages au démarrage de l'application\r\n    dispatch(fetchLatestDraws());\r\n  }, [dispatch]);\r\n\r\n  const toggleSidebar = () => {\r\n    setSidebarOpen(!sidebarOpen);\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex h-screen bg-gray-100 dark:bg-gray-900\">\r\n      {/* Sidebar */}\r\n      <Sidebar isOpen={sidebarOpen} toggleSidebar={toggleSidebar} />\r\n\r\n      {/* Main Content */}\r\n      <div className=\"flex flex-col flex-1 overflow-hidden\">\r\n        <Header toggleSidebar={toggleSidebar} />\r\n\r\n        <main className=\"flex-1 overflow-y-auto p-4 md:p-6\">\r\n          <Routes>\r\n            <Route path=\"/\" element={<Dashboard />} />\r\n            <Route path=\"/draws\" element={<DrawHistory />} />\r\n            <Route path=\"/generate\" element={<GenerateGrid />} />\r\n            <Route path=\"/saved-grids\" element={<SavedGrids />} /> {/* Nouvelle route ajoutée */}\r\n            <Route path=\"/predictions\" element={<Predictions />} />\r\n            <Route path=\"/statistics\" element={<Statistics />} />\r\n            <Route path=\"/settings\" element={<Settings />} />\r\n            <Route path=\"*\" element={<Navigate to=\"/\" replace />} />\r\n          </Routes>\r\n        </main>\r\n\r\n        <Footer />\r\n      </div>\r\n\r\n      {/* Theme Toggle Button */}\r\n      <ThemeToggle />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","C:\\Users\\Rga\\euromillions-app\\frontend\\src\\pages\\Statistics.js",["138"],"// src/pages/Statistics.js\r\nimport React, { useEffect } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { fetchStatistics } from '../redux/actions/statActions';\r\n\r\nconst Statistics = () => {\r\n  const { t } = useTranslation();\r\n  const dispatch = useDispatch();\r\n  const { stats, loading, error } = useSelector(state => state.stats || {});\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchStatistics());\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <div className=\"container mx-auto px-4 py-8\">\r\n      <h1 className=\"text-2xl font-bold mb-6\">{t('statistics')}</h1>\r\n      \r\n      {loading ? (\r\n        <div className=\"text-center\">\r\n          <p>{t('loading') || 'Chargement...'}</p>\r\n        </div>\r\n      ) : error ? (\r\n        <div className=\"text-red-500\">\r\n          <p>{error}</p>\r\n        </div>\r\n      ) : (\r\n        <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\r\n          <h2 className=\"text-xl font-semibold mb-4\">{t('statisticsInfo') || 'Informations statistiques'}</h2>\r\n          <p>{t('comingSoon') || 'Fonctionnalité à venir...'}</p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Statistics;\r\n","C:\\Users\\Rga\\euromillions-app\\frontend\\src\\pages\\Dashboard.js",[],"C:\\Users\\Rga\\euromillions-app\\frontend\\src\\components\\common\\Footer.js",[],"C:\\Users\\Rga\\euromillions-app\\frontend\\src\\components\\common\\Header.js",[],"C:\\Users\\Rga\\euromillions-app\\frontend\\src\\components\\common\\ThemeToggle.js",[],"C:\\Users\\Rga\\euromillions-app\\frontend\\src\\pages\\SavedGrids.js",["139"],"// pages/SavedGrids.js\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { fetchSavedGrids, deleteGrid, updateGridName } from '../redux/actions/gridActions';\r\nimport LotteryBall from '../components/common/LotteryBall';\r\nimport { printGrid, exportGrids } from '../services/gridService';\r\nimport { Link } from 'react-router-dom';\r\nimport toast from '../utils/toast';\r\n\r\nconst SavedGrids = () => {\r\n  const { t } = useTranslation();\r\n  const dispatch = useDispatch();\r\n  const { savedGrids, loading, error } = useSelector(state => state.grids);\r\n  const [editingId, setEditingId] = useState(null);\r\n  const [newName, setNewName] = useState('');\r\n  const [selectedGrids, setSelectedGrids] = useState([]);\r\n  \r\n  useEffect(() => {\r\n    dispatch(fetchSavedGrids());\r\n  }, [dispatch]);\r\n  \r\n  const handleSelectGrid = (id) => {\r\n    if (selectedGrids.includes(id)) {\r\n      setSelectedGrids(selectedGrids.filter(gridId => gridId !== id));\r\n    } else {\r\n      setSelectedGrids([...selectedGrids, id]);\r\n    }\r\n  };\r\n  \r\n  const handleSelectAll = () => {\r\n    if (selectedGrids.length === savedGrids.length) {\r\n      setSelectedGrids([]);\r\n    } else {\r\n      setSelectedGrids(savedGrids.map(grid => grid._id));\r\n    }\r\n  };\r\n  \r\n  const handlePrint = (grid) => {\r\n    printGrid(grid);\r\n  };\r\n  \r\n  const handleEdit = (grid) => {\r\n    setEditingId(grid._id);\r\n    setNewName(grid.name);\r\n  };\r\n  \r\n  const handleSaveEdit = async () => {\r\n    if (editingId && newName.trim()) {\r\n      try {\r\n        await dispatch(updateGridName(editingId, newName.trim()));\r\n        setEditingId(null);\r\n        setNewName('');\r\n      } catch (error) {\r\n        console.error('Error updating grid name:', error);\r\n      }\r\n    }\r\n  };\r\n  \r\n  const handleCancelEdit = () => {\r\n    setEditingId(null);\r\n    setNewName('');\r\n  };\r\n  \r\n  const handleDelete = async (id) => {\r\n    if (window.confirm(t('confirmDeleteGrid'))) {\r\n      try {\r\n        await dispatch(deleteGrid(id));\r\n      } catch (error) {\r\n        console.error('Error deleting grid:', error);\r\n      }\r\n    }\r\n  };\r\n  \r\n  const handleDeleteSelected = async () => {\r\n    if (selectedGrids.length === 0) return;\r\n    \r\n    if (window.confirm(t('confirmDeleteSelectedGrids', { count: selectedGrids.length }))) {\r\n      try {\r\n        // Delete grids one by one\r\n        for (const id of selectedGrids) {\r\n          await dispatch(deleteGrid(id));\r\n        }\r\n        setSelectedGrids([]);\r\n      } catch (error) {\r\n        console.error('Error deleting selected grids:', error);\r\n      }\r\n    }\r\n  };\r\n  \r\n  const handleExport = async (format) => {\r\n    try {\r\n      const ids = selectedGrids.length > 0 ? selectedGrids : null;\r\n      const response = await exportGrids(format, ids);\r\n      \r\n      // Create a download link\r\n      const url = window.URL.createObjectURL(new Blob([response]));\r\n      const link = document.createElement('a');\r\n      link.href = url;\r\n      link.setAttribute('download', `grilles-euromillions.${format}`);\r\n      document.body.appendChild(link);\r\n      link.click();\r\n      document.body.removeChild(link);\r\n    } catch (error) {\r\n      console.error('Error exporting grids:', error);\r\n    }\r\n  };\r\n  \r\n  const handlePrintSelected = () => {\r\n    if (selectedGrids.length === 0) return;\r\n    \r\n    // Print each selected grid\r\n    const selectedGridObjects = savedGrids.filter(grid => \r\n      selectedGrids.includes(grid._id)\r\n    );\r\n    \r\n    for (const grid of selectedGridObjects) {\r\n      printGrid(grid);\r\n    }\r\n  };\r\n  \r\n  if (loading && savedGrids.length === 0) {\r\n    return (\r\n      <div className=\"container mx-auto px-4 py-8\">\r\n        <h1 className=\"text-2xl font-bold mb-6\">{t('savedGrids')}</h1>\r\n        <div className=\"text-center py-6\">\r\n          <div className=\"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500 mx-auto\"></div>\r\n          <p className=\"mt-4\">{t('loading')}</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  if (error && savedGrids.length === 0) {\r\n    return (\r\n      <div className=\"container mx-auto px-4 py-8\">\r\n        <h1 className=\"text-2xl font-bold mb-6\">{t('savedGrids')}</h1>\r\n        <div className=\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded\">\r\n          <p>{t('errorLoadingGrids')}: {error}</p>\r\n          <button \r\n            className=\"mt-2 bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded\"\r\n            onClick={() => dispatch(fetchSavedGrids())}\r\n          >\r\n            {t('tryAgain')}\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  return (\r\n    <div className=\"container mx-auto px-4 py-8\">\r\n      <h1 className=\"text-2xl font-bold mb-6\">{t('savedGrids')}</h1>\r\n      \r\n      {/* Actions toolbar */}\r\n      <div className=\"bg-gray-100 dark:bg-gray-800 p-4 rounded-lg mb-6 flex flex-wrap items-center gap-3\">\r\n        <button\r\n          onClick={handleSelectAll}\r\n          className=\"px-3 py-1 text-sm bg-gray-200 dark:bg-gray-700 text-gray-800 dark:text-gray-200 rounded hover:bg-gray-300 dark:hover:bg-gray-600\"\r\n        >\r\n          {selectedGrids.length === savedGrids.length ? t('deselectAll') : t('selectAll')}\r\n        </button>\r\n        \r\n        <div className=\"h-6 border-l border-gray-300 dark:border-gray-600\"></div>\r\n        \r\n        <button\r\n          onClick={handlePrintSelected}\r\n          disabled={selectedGrids.length === 0}\r\n          className={`px-3 py-1 text-sm rounded ${\r\n            selectedGrids.length === 0 \r\n              ? 'bg-gray-300 dark:bg-gray-700 text-gray-500 dark:text-gray-400 cursor-not-allowed' \r\n              : 'bg-green-500 text-white hover:bg-green-600'\r\n          }`}\r\n        >\r\n          {t('printSelected')}\r\n        </button>\r\n        \r\n        <button\r\n          onClick={handleDeleteSelected}\r\n          disabled={selectedGrids.length === 0}\r\n          className={`px-3 py-1 text-sm rounded ${\r\n            selectedGrids.length === 0 \r\n              ? 'bg-gray-300 dark:bg-gray-700 text-gray-500 dark:text-gray-400 cursor-not-allowed' \r\n              : 'bg-red-500 text-white hover:bg-red-600'\r\n          }`}\r\n        >\r\n          {t('deleteSelected')}\r\n        </button>\r\n        \r\n        <div className=\"h-6 border-l border-gray-300 dark:border-gray-600\"></div>\r\n        \r\n        <div className=\"relative group\">\r\n          <button\r\n            className=\"px-3 py-1 text-sm bg-blue-500 text-white rounded hover:bg-blue-600\"\r\n          >\r\n            {t('export')}\r\n          </button>\r\n          <div className=\"absolute hidden group-hover:block mt-1 w-32 bg-white dark:bg-gray-800 shadow-lg rounded z-10\">\r\n            <button \r\n              onClick={() => handleExport('csv')}\r\n              className=\"block w-full text-left px-4 py-2 text-sm hover:bg-gray-100 dark:hover:bg-gray-700\"\r\n            >\r\n              CSV\r\n            </button>\r\n            <button \r\n              onClick={() => handleExport('json')}\r\n              className=\"block w-full text-left px-4 py-2 text-sm hover:bg-gray-100 dark:hover:bg-gray-700\"\r\n            >\r\n              JSON\r\n            </button>\r\n          </div>\r\n        </div>\r\n        \r\n        <div className=\"ml-auto\">\r\n          <Link \r\n            to=\"/generate\"\r\n            className=\"px-3 py-1 text-sm bg-purple-500 text-white rounded hover:bg-purple-600\"\r\n          >\r\n            {t('generateNewGrids')}\r\n          </Link>\r\n        </div>\r\n      </div>\r\n      \r\n      {savedGrids.length === 0 ? (\r\n        <div className=\"text-center py-10 bg-gray-50 dark:bg-gray-800 rounded-lg\">\r\n          <svg className=\"mx-auto h-12 w-12 text-gray-400\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={1} d=\"M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2\" />\r\n          </svg>\r\n          <h3 className=\"mt-2 text-lg font-medium text-gray-900 dark:text-white\">{t('noSavedGrids')}</h3>\r\n          <p className=\"mt-1 text-gray-500 dark:text-gray-400\">{t('startBySavingGrids')}</p>\r\n          <div className=\"mt-6\">\r\n            <Link\r\n              to=\"/generate\"\r\n              className=\"inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700\"\r\n            >\r\n              {t('generateGrids')}\r\n            </Link>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\r\n          {savedGrids.map(grid => (\r\n            <div \r\n              key={grid._id} \r\n              className={`border rounded-lg overflow-hidden shadow-sm hover:shadow-md transition-shadow ${\r\n                selectedGrids.includes(grid._id) ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/20' : 'border-gray-200 dark:border-gray-700'\r\n              }`}\r\n            >\r\n              <div className=\"p-4\">\r\n                <div className=\"flex items-center mb-3\">\r\n                  <input \r\n                    type=\"checkbox\"\r\n                    checked={selectedGrids.includes(grid._id)}\r\n                    onChange={() => handleSelectGrid(grid._id)}\r\n                    className=\"h-4 w-4 text-blue-600 rounded border-gray-300 focus:ring-blue-500\"\r\n                  />\r\n                  \r\n                  {editingId === grid._id ? (\r\n                    <div className=\"ml-2 flex-1 flex\">\r\n                      <input\r\n                        type=\"text\"\r\n                        value={newName}\r\n                        onChange={(e) => setNewName(e.target.value)}\r\n                        className=\"flex-1 border-gray-300 rounded text-sm p-1\"\r\n                        autoFocus\r\n                      />\r\n                      <button \r\n                        onClick={handleSaveEdit}\r\n                        className=\"ml-1 text-green-500 hover:text-green-600\"\r\n                      >\r\n                        <svg className=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\r\n                        </svg>\r\n                      </button>\r\n                      <button \r\n                        onClick={handleCancelEdit}\r\n                        className=\"ml-1 text-red-500 hover:text-red-600\"\r\n                      >\r\n                        <svg className=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\r\n                        </svg>\r\n                      </button>\r\n                    </div>\r\n                  ) : (\r\n                    <h3 className=\"ml-2 text-lg font-medium flex-1 truncate\">\r\n                      {grid.name || t('unnamedGrid')}\r\n                      <button \r\n                        onClick={() => handleEdit(grid)}\r\n                        className=\"ml-1 text-gray-500 hover:text-blue-500 inline-block\"\r\n                      >\r\n                        <svg className=\"h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z\" />\r\n                        </svg>\r\n                      </button>\r\n                    </h3>\r\n                  )}\r\n                </div>\r\n                \r\n                <div className=\"flex justify-center my-3 flex-wrap\">\r\n                  {grid.numbers.map(number => (\r\n                    <LotteryBall \r\n                      key={`number-${number}`} \r\n                      number={number} \r\n                      type=\"number\"\r\n                      className=\"m-1\"\r\n                    />\r\n                  ))}\r\n                  <span className=\"mx-2 self-center\">+</span>\r\n                  {grid.stars.map(star => (\r\n                    <LotteryBall \r\n                      key={`star-${star}`} \r\n                      number={star} \r\n                      type=\"star\"\r\n                      className=\"m-1\"\r\n                    />\r\n                  ))}\r\n                </div>\r\n                \r\n                {grid.method && (\r\n                  <div className=\"text-sm text-gray-600 dark:text-gray-400 mt-2\">\r\n                    {t('generatedUsing')}: {t(grid.method)}\r\n                  </div>\r\n                )}\r\n                \r\n                {grid.confidence > 0 && (\r\n                  <div className=\"text-sm text-gray-600 dark:text-gray-400\">\r\n                    {t('confidence')}: {Math.round(grid.confidence * 100)}%\r\n                  </div>\r\n                )}\r\n                \r\n                <div className=\"mt-4 flex justify-between gap-2\">\r\n                  <button\r\n                    onClick={() => handlePrint(grid)}\r\n                    className=\"flex-1 px-3 py-1 text-sm bg-gray-200 dark:bg-gray-700 text-gray-800 dark:text-gray-200 rounded hover:bg-gray-300 dark:hover:bg-gray-600\"\r\n                  >\r\n                    {t('print')}\r\n                  </button>\r\n                  <button\r\n                    onClick={() => handleDelete(grid._id)}\r\n                    className=\"flex-1 px-3 py-1 text-sm bg-red-500 text-white rounded hover:bg-red-600\"\r\n                  >\r\n                    {t('delete')}\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SavedGrids;\r\n","C:\\Users\\Rga\\euromillions-app\\frontend\\src\\pages\\GenerateGrid.js",[],"C:\\Users\\Rga\\euromillions-app\\frontend\\src\\components\\common\\Sidebar.js",[],"C:\\Users\\Rga\\euromillions-app\\frontend\\src\\components\\common\\LotteryBall.js",[],"C:\\Users\\Rga\\euromillions-app\\frontend\\src\\services\\gridService.js",[],"C:\\Users\\Rga\\euromillions-app\\frontend\\src\\components\\grids\\GridCard.js",[],"C:\\Users\\Rga\\euromillions-app\\frontend\\src\\components\\grids\\GridGenerator.js",[],"C:\\Users\\Rga\\euromillions-app\\frontend\\src\\redux\\actions\\gridActions.js",[],"C:\\Users\\Rga\\euromillions-app\\frontend\\src\\services\\apiService.js",[],"C:\\Users\\Rga\\euromillions-app\\frontend\\src\\redux\\types.js",[],"C:\\Users\\Rga\\euromillions-app\\frontend\\src\\utils\\toast.js",[],"C:\\Users\\Rga\\euromillions-app\\frontend\\src\\i18n\\index.js",[],"C:\\Users\\Rga\\euromillions-app\\frontend\\src\\redux\\actions\\drawActions.js",["140"],"// src/redux/actions/drawActions.js\r\nimport * as types from '../types';\r\nimport apiClient from '../../services/apiService';\r\n\r\n// Fonction pour récupérer les derniers tirages\r\nexport const fetchLatestDraws = () => async (dispatch) => {\r\n  dispatch({ type: types.FETCH_LATEST_DRAWS_REQUEST });\r\n  \r\n  try {\r\n    // Simuler une réponse pour le développement\r\n    // Dans une application réelle, vous feriez un appel API ici\r\n    // const response = await apiClient.get('/draws/latest');\r\n    \r\n    // Données de tirage simulées pour le développement\r\n    const mockLatestDraw = {\r\n      id: '1',\r\n      date: new Date().toISOString(),\r\n      numbers: [5, 15, 23, 32, 45],\r\n      stars: [2, 7]\r\n    };\r\n    \r\n    setTimeout(() => {\r\n      dispatch({\r\n        type: types.FETCH_LATEST_DRAWS_SUCCESS,\r\n        payload: mockLatestDraw\r\n      });\r\n    }, 1000); // Simule un délai de réponse\r\n  } catch (error) {\r\n    dispatch({\r\n      type: types.FETCH_LATEST_DRAWS_FAILURE,\r\n      payload: error.message || 'Une erreur est survenue lors de la récupération des tirages'\r\n    });\r\n  }\r\n};\r\n\r\n// Fonction pour récupérer l'historique des tirages\r\nexport const fetchDrawHistory = (page = 1, limit = 10) => async (dispatch) => {\r\n  dispatch({ type: types.FETCH_DRAW_HISTORY_REQUEST });\r\n  \r\n  try {\r\n    // Simuler une réponse pour le développement\r\n    // Dans une application réelle, vous feriez un appel API ici\r\n    // const response = await apiClient.get(`/draws?page=${page}&limit=${limit}`);\r\n    \r\n    // Données d'historique simulées pour le développement\r\n    const mockDrawHistory = Array.from({ length: 10 }, (_, i) => ({\r\n      id: `${i + 1}`,\r\n      date: new Date(Date.now() - i * 7 * 24 * 60 * 60 * 1000).toISOString(), // i semaines en arrière\r\n      numbers: [\r\n        Math.floor(Math.random() * 50) + 1,\r\n        Math.floor(Math.random() * 50) + 1,\r\n        Math.floor(Math.random() * 50) + 1,\r\n        Math.floor(Math.random() * 50) + 1,\r\n        Math.floor(Math.random() * 50) + 1\r\n      ].sort((a, b) => a - b),\r\n      stars: [\r\n        Math.floor(Math.random() * 12) + 1,\r\n        Math.floor(Math.random() * 12) + 1\r\n      ].sort((a, b) => a - b)\r\n    }));\r\n    \r\n    setTimeout(() => {\r\n      dispatch({\r\n        type: types.FETCH_DRAW_HISTORY_SUCCESS,\r\n        payload: {\r\n          draws: mockDrawHistory,\r\n          pagination: {\r\n            page,\r\n            limit,\r\n            total: 100 // Nombre total simulé de tirages\r\n          }\r\n        }\r\n      });\r\n    }, 1000); // Simule un délai de réponse\r\n  } catch (error) {\r\n    dispatch({\r\n      type: types.FETCH_DRAW_HISTORY_FAILURE,\r\n      payload: error.message || 'Une erreur est survenue lors de la récupération de l\\'historique'\r\n    });\r\n  }\r\n};\r\n","C:\\Users\\Rga\\euromillions-app\\frontend\\src\\redux\\store.js",[],"C:\\Users\\Rga\\euromillions-app\\frontend\\src\\redux\\reducers\\index.js",[],"C:\\Users\\Rga\\euromillions-app\\frontend\\src\\redux\\reducers\\drawReducer.js",[],"C:\\Users\\Rga\\euromillions-app\\frontend\\src\\redux\\reducers\\gridReducer.js",[],["141","142"],"C:\\Users\\Rga\\euromillions-app\\frontend\\src\\redux\\actions\\statActions.js",["143"],"// src/redux/actions/statActions.js\r\nimport * as types from '../types';\r\nimport apiClient from '../../services/apiService';\r\n\r\n// Fonction pour récupérer les statistiques générales\r\nexport const fetchStatistics = () => async (dispatch) => {\r\n  dispatch({ type: types.FETCH_STATISTICS_REQUEST });\r\n  \r\n  try {\r\n    // Simuler une réponse pour le développement\r\n    // Dans une application réelle, vous feriez un appel API ici\r\n    // const response = await apiClient.get('/stats');\r\n    \r\n    // Données de statistiques simulées pour le développement\r\n    const mockStatistics = {\r\n      numberFrequencies: Array.from({ length: 50 }, (_, i) => ({\r\n        number: i + 1,\r\n        frequency: Math.floor(Math.random() * 100) + 1\r\n      })).sort((a, b) => b.frequency - a.frequency),\r\n      \r\n      starFrequencies: Array.from({ length: 12 }, (_, i) => ({\r\n        star: i + 1,\r\n        frequency: Math.floor(Math.random() * 100) + 1\r\n      })).sort((a, b) => b.frequency - a.frequency),\r\n      \r\n      numberPairs: [\r\n        { numbers: [1, 17], occurrences: 12 },\r\n        { numbers: [23, 44], occurrences: 10 },\r\n        { numbers: [7, 32], occurrences: 9 }\r\n      ],\r\n      \r\n      patterns: [\r\n        { description: 'Numéros consécutifs', occurrences: '15%' },\r\n        { description: 'Numéros tous impairs', occurrences: '8%' },\r\n        { description: 'Numéros tous pairs', occurrences: '7%' }\r\n      ]\r\n    };\r\n    \r\n    setTimeout(() => {\r\n      dispatch({\r\n        type: types.FETCH_STATISTICS_SUCCESS,\r\n        payload: mockStatistics\r\n      });\r\n    }, 1000); // Simule un délai de réponse\r\n  } catch (error) {\r\n    dispatch({\r\n      type: types.FETCH_STATISTICS_FAILURE,\r\n      payload: error.message || 'Une erreur est survenue lors de la récupération des statistiques'\r\n    });\r\n  }\r\n};\r\n","C:\\Users\\Rga\\euromillions-app\\frontend\\src\\redux\\reducers\\statReducer.js",[],"C:\\Users\\Rga\\euromillions-app\\frontend\\src\\pages\\DrawHistory.js",[],"C:\\Users\\Rga\\euromillions-app\\frontend\\src\\pages\\Predictions.js",["144","145","146","147"],"// src/pages/Predictions.js\r\nimport React, { useEffect } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { fetchPredictions } from '../redux/actions/predictionActions';\r\n\r\nconst Predictions = () => {\r\n  const { t } = useTranslation();\r\n  const dispatch = useDispatch();\r\n  // Utilisez une valeur par défaut pour éviter des erreurs si le reducer n'est pas encore disponible\r\n  const { predictions = [], loading = false, error = null } = useSelector(state => state.predictions || {});\r\n\r\n  useEffect(() => {\r\n    // Commentez cette ligne pour éviter les erreurs si le reducer n'est pas encore disponible\r\n    // dispatch(fetchPredictions());\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <div className=\"container mx-auto px-4 py-8\">\r\n      <h1 className=\"text-2xl font-bold mb-6\">{t('predictions') || 'Prédictions'}</h1>\r\n      \r\n      <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\r\n        <h2 className=\"text-xl font-semibold mb-4\">{t('nextDrawPredictions') || 'Prédictions pour le prochain tirage'}</h2>\r\n        <p className=\"mb-4\">{t('predictionsComingSoon') || 'Cette fonctionnalité sera bientôt disponible.'}</p>\r\n        \r\n        <div className=\"p-4 bg-blue-50 dark:bg-blue-900 rounded-lg\">\r\n          <p className=\"text-sm text-blue-800 dark:text-blue-200\">\r\n            {t('predictionsDisclaimer') || 'Les prédictions sont basées sur des analyses statistiques et ne garantissent pas les résultats futurs.'}\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Predictions;\r\n","C:\\Users\\Rga\\euromillions-app\\frontend\\src\\pages\\Settings.js",[],"C:\\Users\\Rga\\euromillions-app\\frontend\\src\\redux\\actions\\predictionActions.js",["148"],"// src/redux/actions/predictionActions.js\r\nimport * as types from '../types';\r\nimport apiClient from '../../services/apiService';\r\n\r\n// Fonction pour récupérer les prédictions\r\nexport const fetchPredictions = () => async (dispatch) => {\r\n  dispatch({ type: types.FETCH_PREDICTIONS_REQUEST });\r\n  \r\n  try {\r\n    // Simuler une réponse pour le développement\r\n    // Dans une application réelle, vous feriez un appel API ici\r\n    // const response = await apiClient.get('/predictions');\r\n    \r\n    // Données de prédictions simulées pour le développement\r\n    const mockPredictions = [\r\n      {\r\n        id: 1,\r\n        numbers: [7, 12, 23, 34, 45],\r\n        stars: [3, 9],\r\n        confidence: 0.75,\r\n        model: 'frequency'\r\n      },\r\n      {\r\n        id: 2,\r\n        numbers: [3, 17, 25, 37, 41],\r\n        stars: [2, 8],\r\n        confidence: 0.68,\r\n        model: 'hotNumbers'\r\n      },\r\n      {\r\n        id: 3,\r\n        numbers: [5, 10, 15, 20, 25],\r\n        stars: [5, 10],\r\n        confidence: 0.62,\r\n        model: 'pattern'\r\n      }\r\n    ];\r\n    \r\n    setTimeout(() => {\r\n      dispatch({\r\n        type: types.FETCH_PREDICTIONS_SUCCESS,\r\n        payload: mockPredictions\r\n      });\r\n    }, 1000); // Simule un délai de réponse\r\n  } catch (error) {\r\n    dispatch({\r\n      type: types.FETCH_PREDICTIONS_FAILURE,\r\n      payload: error.message || 'Une erreur est survenue lors de la récupération des prédictions'\r\n    });\r\n  }\r\n};\r\n","C:\\Users\\Rga\\euromillions-app\\frontend\\src\\redux\\reducers\\predictionReducer.js",[],{"ruleId":"149","replacedBy":"150"},{"ruleId":"151","replacedBy":"152"},{"ruleId":"153","severity":1,"message":"154","line":27,"column":11,"nodeType":"155","messageId":"156","endLine":27,"endColumn":12},{"ruleId":"153","severity":1,"message":"157","line":10,"column":11,"nodeType":"155","messageId":"156","endLine":10,"endColumn":16},{"ruleId":"153","severity":1,"message":"158","line":9,"column":8,"nodeType":"155","messageId":"156","endLine":9,"endColumn":13},{"ruleId":"153","severity":1,"message":"159","line":3,"column":8,"nodeType":"155","messageId":"156","endLine":3,"endColumn":17},{"ruleId":"149","replacedBy":"160"},{"ruleId":"151","replacedBy":"161"},{"ruleId":"153","severity":1,"message":"159","line":3,"column":8,"nodeType":"155","messageId":"156","endLine":3,"endColumn":17},{"ruleId":"153","severity":1,"message":"162","line":5,"column":10,"nodeType":"155","messageId":"156","endLine":5,"endColumn":26},{"ruleId":"153","severity":1,"message":"163","line":11,"column":11,"nodeType":"155","messageId":"156","endLine":11,"endColumn":22},{"ruleId":"153","severity":1,"message":"164","line":11,"column":29,"nodeType":"155","messageId":"156","endLine":11,"endColumn":36},{"ruleId":"153","severity":1,"message":"165","line":11,"column":46,"nodeType":"155","messageId":"156","endLine":11,"endColumn":51},{"ruleId":"153","severity":1,"message":"159","line":3,"column":8,"nodeType":"155","messageId":"156","endLine":3,"endColumn":17},"no-native-reassign",["166"],"no-negated-in-lhs",["167"],"no-unused-vars","'t' is assigned a value but never used.","Identifier","unusedVar","'stats' is assigned a value but never used.","'toast' is defined but never used.","'apiClient' is defined but never used.",["166"],["167"],"'fetchPredictions' is defined but never used.","'predictions' is assigned a value but never used.","'loading' is assigned a value but never used.","'error' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]