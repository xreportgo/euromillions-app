{"ast":null,"code":"// src/utils/api.js\nimport axios from 'axios';\n\n// Création d'une instance axios avec configuration de base\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || '/api',\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n  }\n});\n\n// Sauvegarder les vraies données pour éviter leur remplacement\nconst realDataCache = {\n  latestDraw: null,\n  draws: null\n};\n\n// Intercepteur de réponse pour détecter et bloquer les données fictives\napi.interceptors.response.use(response => {\n  const url = response.config.url;\n\n  // Vérifier si c'est une réponse de l'API des tirages\n  if (url.includes('/draws/latest')) {\n    // Vérifier si les données semblent réelles\n    if (response.data && response.data.date) {\n      const date = new Date(response.data.date);\n      // Si c'est une date valide et raisonnable (après 2004, avant aujourd'hui)\n      if (date > new Date('2004-01-01') && date <= new Date()) {\n        console.log('✅ Données réelles détectées:', response.data);\n        // Enregistrer ces données réelles\n        realDataCache.latestDraw = response.data;\n      } else {\n        console.warn('⚠️ Données fictives détectées!', response.data);\n\n        // Si nous avons des données réelles en cache, les utiliser à la place\n        if (realDataCache.latestDraw) {\n          console.log('🔄 Remplacement par des données réelles cachées');\n          return {\n            ...response,\n            data: realDataCache.latestDraw\n          };\n        }\n      }\n    }\n  }\n\n  // Même logique pour les listes de tirages\n  if (url.includes('/draws') && !url.includes('/latest')) {\n    if (response.data && response.data.data && Array.isArray(response.data.data)) {\n      // Vérifier si les données semblent réelles\n      const hasRealDates = response.data.data.every(draw => {\n        const date = new Date(draw.date);\n        return date > new Date('2004-01-01') && date <= new Date();\n      });\n      if (hasRealDates) {\n        console.log('✅ Liste de tirages réels détectée');\n        realDataCache.draws = response.data;\n      } else {\n        console.warn('⚠️ Liste de tirages fictifs détectée!');\n        if (realDataCache.draws) {\n          console.log('🔄 Remplacement par des données réelles cachées');\n          return {\n            ...response,\n            data: realDataCache.draws\n          };\n        }\n      }\n    }\n  }\n  return response;\n}, error => {\n  return Promise.reject(error);\n});\n\n// API des tirages\nexport const drawsApi = {\n  getAll: (page = 1, limit = 10) => api.get(`/draws?page=${page}&limit=${limit}`),\n  getLatest: () => api.get('/draws/latest'),\n  getById: id => api.get(`/draws/${id}`),\n  getByDate: date => api.get(`/draws/date/${date}`)\n};\n\n// API des prédictions\nexport const predictionsApi = {\n  generate: (method = 'frequency') => api.get(`/predictions?method=${method}`)\n};\n\n// API des statistiques\nexport const statsApi = {\n  getGeneral: () => api.get('/stats'),\n  getNumberFrequencies: () => api.get('/stats/numbers'),\n  getStarFrequencies: () => api.get('/stats/stars'),\n  getIntervalStats: () => api.get('/stats/intervals')\n};\nexport default {\n  draws: drawsApi,\n  predictions: predictionsApi,\n  stats: statsApi\n};","map":{"version":3,"names":["axios","api","create","baseURL","process","env","REACT_APP_API_URL","timeout","headers","realDataCache","latestDraw","draws","interceptors","response","use","url","config","includes","data","date","Date","console","log","warn","Array","isArray","hasRealDates","every","draw","error","Promise","reject","drawsApi","getAll","page","limit","get","getLatest","getById","id","getByDate","predictionsApi","generate","method","statsApi","getGeneral","getNumberFrequencies","getStarFrequencies","getIntervalStats","predictions","stats"],"sources":["C:/Users/Rga/Desktop/HelloEuro/euromillions-app/frontend/src/utils/api.js"],"sourcesContent":["// src/utils/api.js\r\nimport axios from 'axios';\r\n\r\n// Création d'une instance axios avec configuration de base\r\nconst api = axios.create({\r\n  baseURL: process.env.REACT_APP_API_URL || '/api',\r\n  timeout: 10000,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n    'Accept': 'application/json'\r\n  }\r\n});\r\n\r\n// Sauvegarder les vraies données pour éviter leur remplacement\r\nconst realDataCache = {\r\n  latestDraw: null,\r\n  draws: null\r\n};\r\n\r\n// Intercepteur de réponse pour détecter et bloquer les données fictives\r\napi.interceptors.response.use(\r\n  response => {\r\n    const url = response.config.url;\r\n    \r\n    // Vérifier si c'est une réponse de l'API des tirages\r\n    if (url.includes('/draws/latest')) {\r\n      // Vérifier si les données semblent réelles\r\n      if (response.data && response.data.date) {\r\n        const date = new Date(response.data.date);\r\n        // Si c'est une date valide et raisonnable (après 2004, avant aujourd'hui)\r\n        if (date > new Date('2004-01-01') && date <= new Date()) {\r\n          console.log('✅ Données réelles détectées:', response.data);\r\n          // Enregistrer ces données réelles\r\n          realDataCache.latestDraw = response.data;\r\n        } else {\r\n          console.warn('⚠️ Données fictives détectées!', response.data);\r\n          \r\n          // Si nous avons des données réelles en cache, les utiliser à la place\r\n          if (realDataCache.latestDraw) {\r\n            console.log('🔄 Remplacement par des données réelles cachées');\r\n            return { ...response, data: realDataCache.latestDraw };\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    // Même logique pour les listes de tirages\r\n    if (url.includes('/draws') && !url.includes('/latest')) {\r\n      if (response.data && response.data.data && Array.isArray(response.data.data)) {\r\n        // Vérifier si les données semblent réelles\r\n        const hasRealDates = response.data.data.every(draw => {\r\n          const date = new Date(draw.date);\r\n          return date > new Date('2004-01-01') && date <= new Date();\r\n        });\r\n        \r\n        if (hasRealDates) {\r\n          console.log('✅ Liste de tirages réels détectée');\r\n          realDataCache.draws = response.data;\r\n        } else {\r\n          console.warn('⚠️ Liste de tirages fictifs détectée!');\r\n          \r\n          if (realDataCache.draws) {\r\n            console.log('🔄 Remplacement par des données réelles cachées');\r\n            return { ...response, data: realDataCache.draws };\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    return response;\r\n  },\r\n  error => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// API des tirages\r\nexport const drawsApi = {\r\n  getAll: (page = 1, limit = 10) => api.get(`/draws?page=${page}&limit=${limit}`),\r\n  getLatest: () => api.get('/draws/latest'),\r\n  getById: (id) => api.get(`/draws/${id}`),\r\n  getByDate: (date) => api.get(`/draws/date/${date}`)\r\n};\r\n\r\n// API des prédictions\r\nexport const predictionsApi = {\r\n  generate: (method = 'frequency') => api.get(`/predictions?method=${method}`)\r\n};\r\n\r\n// API des statistiques\r\nexport const statsApi = {\r\n  getGeneral: () => api.get('/stats'),\r\n  getNumberFrequencies: () => api.get('/stats/numbers'),\r\n  getStarFrequencies: () => api.get('/stats/stars'),\r\n  getIntervalStats: () => api.get('/stats/intervals')\r\n};\r\n\r\nexport default {\r\n  draws: drawsApi,\r\n  predictions: predictionsApi,\r\n  stats: statsApi\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}