{"ast":null,"code":"// redux/actions/gridActions.js\nimport * as types from '../types';\nimport * as gridService from '../../services/gridService';\nexport const fetchSavedGrids = () => async dispatch => {\n  dispatch({\n    type: types.FETCH_SAVED_GRIDS_REQUEST\n  });\n  try {\n    const grids = await gridService.getAllGrids();\n    dispatch({\n      type: types.FETCH_SAVED_GRIDS_SUCCESS,\n      payload: grids\n    });\n  } catch (error) {\n    dispatch({\n      type: types.FETCH_SAVED_GRIDS_FAILURE,\n      payload: error.message\n    });\n  }\n};\nexport const saveGrid = grid => async dispatch => {\n  dispatch({\n    type: types.SAVE_GRID_REQUEST\n  });\n  try {\n    const savedGrid = await gridService.saveGrid(grid);\n    dispatch({\n      type: types.SAVE_GRID_SUCCESS,\n      payload: savedGrid\n    });\n    return savedGrid;\n  } catch (error) {\n    dispatch({\n      type: types.SAVE_GRID_FAILURE,\n      payload: error.message\n    });\n    throw error;\n  }\n};\nexport const updateGridName = (id, name) => async dispatch => {\n  dispatch({\n    type: types.UPDATE_GRID_REQUEST\n  });\n  try {\n    const updatedGrid = await gridService.updateGrid(id, {\n      name\n    });\n    dispatch({\n      type: types.UPDATE_GRID_SUCCESS,\n      payload: updatedGrid\n    });\n    return updatedGrid;\n  } catch (error) {\n    dispatch({\n      type: types.UPDATE_GRID_FAILURE,\n      payload: error.message\n    });\n    throw error;\n  }\n};\nexport const deleteGrid = id => async dispatch => {\n  dispatch({\n    type: types.DELETE_GRID_REQUEST,\n    payload: id\n  });\n  try {\n    await gridService.deleteGrid(id);\n    dispatch({\n      type: types.DELETE_GRID_SUCCESS,\n      payload: id\n    });\n  } catch (error) {\n    dispatch({\n      type: types.DELETE_GRID_FAILURE,\n      payload: {\n        id,\n        error: error.message\n      }\n    });\n    throw error;\n  }\n};","map":{"version":3,"names":["types","gridService","fetchSavedGrids","dispatch","type","FETCH_SAVED_GRIDS_REQUEST","grids","getAllGrids","FETCH_SAVED_GRIDS_SUCCESS","payload","error","FETCH_SAVED_GRIDS_FAILURE","message","saveGrid","grid","SAVE_GRID_REQUEST","savedGrid","SAVE_GRID_SUCCESS","SAVE_GRID_FAILURE","updateGridName","id","name","UPDATE_GRID_REQUEST","updatedGrid","updateGrid","UPDATE_GRID_SUCCESS","UPDATE_GRID_FAILURE","deleteGrid","DELETE_GRID_REQUEST","DELETE_GRID_SUCCESS","DELETE_GRID_FAILURE"],"sources":["C:/Users/Rga/euromillions-app/frontend/src/redux/actions/gridActions.js"],"sourcesContent":["// redux/actions/gridActions.js\r\nimport * as types from '../types';\r\nimport * as gridService from '../../services/gridService';\r\n\r\nexport const fetchSavedGrids = () => async (dispatch) => {\r\n  dispatch({ type: types.FETCH_SAVED_GRIDS_REQUEST });\r\n  try {\r\n    const grids = await gridService.getAllGrids();\r\n    dispatch({ \r\n      type: types.FETCH_SAVED_GRIDS_SUCCESS, \r\n      payload: grids \r\n    });\r\n  } catch (error) {\r\n    dispatch({ \r\n      type: types.FETCH_SAVED_GRIDS_FAILURE, \r\n      payload: error.message \r\n    });\r\n  }\r\n};\r\n\r\nexport const saveGrid = (grid) => async (dispatch) => {\r\n  dispatch({ type: types.SAVE_GRID_REQUEST });\r\n  try {\r\n    const savedGrid = await gridService.saveGrid(grid);\r\n    dispatch({ \r\n      type: types.SAVE_GRID_SUCCESS, \r\n      payload: savedGrid \r\n    });\r\n    return savedGrid;\r\n  } catch (error) {\r\n    dispatch({ \r\n      type: types.SAVE_GRID_FAILURE, \r\n      payload: error.message \r\n    });\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const updateGridName = (id, name) => async (dispatch) => {\r\n  dispatch({ type: types.UPDATE_GRID_REQUEST });\r\n  try {\r\n    const updatedGrid = await gridService.updateGrid(id, { name });\r\n    dispatch({ \r\n      type: types.UPDATE_GRID_SUCCESS, \r\n      payload: updatedGrid \r\n    });\r\n    return updatedGrid;\r\n  } catch (error) {\r\n    dispatch({ \r\n      type: types.UPDATE_GRID_FAILURE, \r\n      payload: error.message \r\n    });\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const deleteGrid = (id) => async (dispatch) => {\r\n  dispatch({ type: types.DELETE_GRID_REQUEST, payload: id });\r\n  try {\r\n    await gridService.deleteGrid(id);\r\n    dispatch({ \r\n      type: types.DELETE_GRID_SUCCESS, \r\n      payload: id \r\n    });\r\n  } catch (error) {\r\n    dispatch({ \r\n      type: types.DELETE_GRID_FAILURE, \r\n      payload: { id, error: error.message } \r\n    });\r\n    throw error;\r\n  }\r\n};\r\n"],"mappings":"AAAA;AACA,OAAO,KAAKA,KAAK,MAAM,UAAU;AACjC,OAAO,KAAKC,WAAW,MAAM,4BAA4B;AAEzD,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAM,MAAOC,QAAQ,IAAK;EACvDA,QAAQ,CAAC;IAAEC,IAAI,EAAEJ,KAAK,CAACK;EAA0B,CAAC,CAAC;EACnD,IAAI;IACF,MAAMC,KAAK,GAAG,MAAML,WAAW,CAACM,WAAW,CAAC,CAAC;IAC7CJ,QAAQ,CAAC;MACPC,IAAI,EAAEJ,KAAK,CAACQ,yBAAyB;MACrCC,OAAO,EAAEH;IACX,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOI,KAAK,EAAE;IACdP,QAAQ,CAAC;MACPC,IAAI,EAAEJ,KAAK,CAACW,yBAAyB;MACrCF,OAAO,EAAEC,KAAK,CAACE;IACjB,CAAC,CAAC;EACJ;AACF,CAAC;AAED,OAAO,MAAMC,QAAQ,GAAIC,IAAI,IAAK,MAAOX,QAAQ,IAAK;EACpDA,QAAQ,CAAC;IAAEC,IAAI,EAAEJ,KAAK,CAACe;EAAkB,CAAC,CAAC;EAC3C,IAAI;IACF,MAAMC,SAAS,GAAG,MAAMf,WAAW,CAACY,QAAQ,CAACC,IAAI,CAAC;IAClDX,QAAQ,CAAC;MACPC,IAAI,EAAEJ,KAAK,CAACiB,iBAAiB;MAC7BR,OAAO,EAAEO;IACX,CAAC,CAAC;IACF,OAAOA,SAAS;EAClB,CAAC,CAAC,OAAON,KAAK,EAAE;IACdP,QAAQ,CAAC;MACPC,IAAI,EAAEJ,KAAK,CAACkB,iBAAiB;MAC7BT,OAAO,EAAEC,KAAK,CAACE;IACjB,CAAC,CAAC;IACF,MAAMF,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMS,cAAc,GAAGA,CAACC,EAAE,EAAEC,IAAI,KAAK,MAAOlB,QAAQ,IAAK;EAC9DA,QAAQ,CAAC;IAAEC,IAAI,EAAEJ,KAAK,CAACsB;EAAoB,CAAC,CAAC;EAC7C,IAAI;IACF,MAAMC,WAAW,GAAG,MAAMtB,WAAW,CAACuB,UAAU,CAACJ,EAAE,EAAE;MAAEC;IAAK,CAAC,CAAC;IAC9DlB,QAAQ,CAAC;MACPC,IAAI,EAAEJ,KAAK,CAACyB,mBAAmB;MAC/BhB,OAAO,EAAEc;IACX,CAAC,CAAC;IACF,OAAOA,WAAW;EACpB,CAAC,CAAC,OAAOb,KAAK,EAAE;IACdP,QAAQ,CAAC;MACPC,IAAI,EAAEJ,KAAK,CAAC0B,mBAAmB;MAC/BjB,OAAO,EAAEC,KAAK,CAACE;IACjB,CAAC,CAAC;IACF,MAAMF,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMiB,UAAU,GAAIP,EAAE,IAAK,MAAOjB,QAAQ,IAAK;EACpDA,QAAQ,CAAC;IAAEC,IAAI,EAAEJ,KAAK,CAAC4B,mBAAmB;IAAEnB,OAAO,EAAEW;EAAG,CAAC,CAAC;EAC1D,IAAI;IACF,MAAMnB,WAAW,CAAC0B,UAAU,CAACP,EAAE,CAAC;IAChCjB,QAAQ,CAAC;MACPC,IAAI,EAAEJ,KAAK,CAAC6B,mBAAmB;MAC/BpB,OAAO,EAAEW;IACX,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOV,KAAK,EAAE;IACdP,QAAQ,CAAC;MACPC,IAAI,EAAEJ,KAAK,CAAC8B,mBAAmB;MAC/BrB,OAAO,EAAE;QAAEW,EAAE;QAAEV,KAAK,EAAEA,KAAK,CAACE;MAAQ;IACtC,CAAC,CAAC;IACF,MAAMF,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}