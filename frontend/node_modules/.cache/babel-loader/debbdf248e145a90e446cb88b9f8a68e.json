{"ast":null,"code":"// src/services/gridService.js\nimport apiClient from './apiService';\nexport const generateGrids = async params => {\n  try {\n    const response = await apiClient.post('/grids/generate', params);\n\n    // Vérifier que les données ont le format attendu\n    if (!response || !Array.isArray(response)) {\n      console.error('Format de réponse inattendu:', response);\n      // Retourner un tableau vide en cas d'erreur\n      return [];\n    }\n\n    // Vérifier chaque grille\n    const validatedGrids = response.map(grid => {\n      // Si la grille n'a pas de numéros ou d'étoiles, ajouter des valeurs par défaut\n      if (!grid.numbers) grid.numbers = [];\n      if (!grid.stars) grid.stars = [];\n      return grid;\n    });\n    return validatedGrids;\n  } catch (error) {\n    console.error('Erreur lors de la génération des grilles:', error);\n    throw error;\n  }\n};\nexport const getAllGrids = async () => {\n  try {\n    return await apiClient.get('/grids');\n  } catch (error) {\n    console.error('Erreur lors de la récupération des grilles:', error);\n    throw error;\n  }\n};\nexport const getGridById = async id => {\n  try {\n    return await apiClient.get(`/grids/${id}`);\n  } catch (error) {\n    console.error(`Erreur lors de la récupération de la grille ${id}:`, error);\n    throw error;\n  }\n};\nexport const saveGrid = async grid => {\n  try {\n    return await apiClient.post('/grids', grid);\n  } catch (error) {\n    console.error('Erreur lors de la sauvegarde de la grille:', error);\n    throw error;\n  }\n};\nexport const updateGrid = async (id, data) => {\n  try {\n    return await apiClient.put(`/grids/${id}`, data);\n  } catch (error) {\n    console.error(`Erreur lors de la mise à jour de la grille ${id}:`, error);\n    throw error;\n  }\n};\nexport const deleteGrid = async id => {\n  try {\n    return await apiClient.delete(`/grids/${id}`);\n  } catch (error) {\n    console.error(`Erreur lors de la suppression de la grille ${id}:`, error);\n    throw error;\n  }\n};\nexport const exportGrids = async (format = 'csv', ids = null) => {\n  try {\n    let url = `/grids/export?format=${format}`;\n    if (ids && ids.length > 0) {\n      url += `&ids=${ids.join(',')}`;\n    }\n    return await apiClient.get(url, {\n      responseType: 'blob'\n    });\n  } catch (error) {\n    console.error('Erreur lors de l\\'export des grilles:', error);\n    throw error;\n  }\n};\nexport const printGrid = grid => {\n  // Créer une nouvelle fenêtre pour l'impression\n  const printWindow = window.open('', '_blank');\n\n  // Appliquer un style pour l'impression\n  printWindow.document.write(`\n    <html>\n      <head>\n        <title>Grille Euromillions</title>\n        <style>\n          body { font-family: Arial, sans-serif; padding: 20px; }\n          .grid-container { border: 1px solid #ccc; padding: 15px; max-width: 400px; margin: 0 auto; }\n          .grid-name { font-size: 18px; font-weight: bold; margin-bottom: 10px; }\n          .numbers-container { display: flex; justify-content: center; margin-bottom: 10px; }\n          .stars-container { display: flex; justify-content: center; }\n          .ball { display: inline-flex; align-items: center; justify-content: center; \n                 width: 40px; height: 40px; border-radius: 50%; margin: 0 5px; \n                 font-weight: bold; color: white; }\n          .number { background-color: #004b9f; }\n          .star { background-color: #fc0; color: #333; }\n          .footer { margin-top: 15px; font-size: 12px; text-align: center; color: #666; }\n        </style>\n      </head>\n      <body>\n        <div class=\"grid-container\">\n          <div class=\"grid-name\">${grid.name || 'Grille Euromillions'}</div>\n          <div class=\"numbers-container\">\n            ${grid.numbers.map(num => `<div class=\"ball number\">${num}</div>`).join('')}\n          </div>\n          <div class=\"stars-container\">\n            ${grid.stars.map(star => `<div class=\"ball star\">${star}</div>`).join('')}\n          </div>\n          <div class=\"footer\">Imprimé le ${new Date().toLocaleDateString()}</div>\n        </div>\n      </body>\n    </html>\n  `);\n\n  // Fermer le document et lancer l'impression\n  printWindow.document.close();\n  printWindow.focus();\n  setTimeout(() => {\n    printWindow.print();\n  }, 250);\n};","map":{"version":3,"names":["apiClient","generateGrids","params","response","post","Array","isArray","console","error","validatedGrids","map","grid","numbers","stars","getAllGrids","get","getGridById","id","saveGrid","updateGrid","data","put","deleteGrid","delete","exportGrids","format","ids","url","length","join","responseType","printGrid","printWindow","window","open","document","write","name","num","star","Date","toLocaleDateString","close","focus","setTimeout","print"],"sources":["C:/Users/Rga/euromillions-app/frontend/src/services/gridService.js"],"sourcesContent":["// src/services/gridService.js\r\nimport apiClient from './apiService';\r\n\r\nexport const generateGrids = async (params) => {\r\n  try {\r\n    const response = await apiClient.post('/grids/generate', params);\r\n    \r\n    // Vérifier que les données ont le format attendu\r\n    if (!response || !Array.isArray(response)) {\r\n      console.error('Format de réponse inattendu:', response);\r\n      // Retourner un tableau vide en cas d'erreur\r\n      return [];\r\n    }\r\n    \r\n    // Vérifier chaque grille\r\n    const validatedGrids = response.map(grid => {\r\n      // Si la grille n'a pas de numéros ou d'étoiles, ajouter des valeurs par défaut\r\n      if (!grid.numbers) grid.numbers = [];\r\n      if (!grid.stars) grid.stars = [];\r\n      return grid;\r\n    });\r\n    \r\n    return validatedGrids;\r\n  } catch (error) {\r\n    console.error('Erreur lors de la génération des grilles:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const getAllGrids = async () => {\r\n  try {\r\n    return await apiClient.get('/grids');\r\n  } catch (error) {\r\n    console.error('Erreur lors de la récupération des grilles:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const getGridById = async (id) => {\r\n  try {\r\n    return await apiClient.get(`/grids/${id}`);\r\n  } catch (error) {\r\n    console.error(`Erreur lors de la récupération de la grille ${id}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const saveGrid = async (grid) => {\r\n  try {\r\n    return await apiClient.post('/grids', grid);\r\n  } catch (error) {\r\n    console.error('Erreur lors de la sauvegarde de la grille:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const updateGrid = async (id, data) => {\r\n  try {\r\n    return await apiClient.put(`/grids/${id}`, data);\r\n  } catch (error) {\r\n    console.error(`Erreur lors de la mise à jour de la grille ${id}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const deleteGrid = async (id) => {\r\n  try {\r\n    return await apiClient.delete(`/grids/${id}`);\r\n  } catch (error) {\r\n    console.error(`Erreur lors de la suppression de la grille ${id}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const exportGrids = async (format = 'csv', ids = null) => {\r\n  try {\r\n    let url = `/grids/export?format=${format}`;\r\n    if (ids && ids.length > 0) {\r\n      url += `&ids=${ids.join(',')}`;\r\n    }\r\n    return await apiClient.get(url, { responseType: 'blob' });\r\n  } catch (error) {\r\n    console.error('Erreur lors de l\\'export des grilles:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const printGrid = (grid) => {\r\n  // Créer une nouvelle fenêtre pour l'impression\r\n  const printWindow = window.open('', '_blank');\r\n  \r\n  // Appliquer un style pour l'impression\r\n  printWindow.document.write(`\r\n    <html>\r\n      <head>\r\n        <title>Grille Euromillions</title>\r\n        <style>\r\n          body { font-family: Arial, sans-serif; padding: 20px; }\r\n          .grid-container { border: 1px solid #ccc; padding: 15px; max-width: 400px; margin: 0 auto; }\r\n          .grid-name { font-size: 18px; font-weight: bold; margin-bottom: 10px; }\r\n          .numbers-container { display: flex; justify-content: center; margin-bottom: 10px; }\r\n          .stars-container { display: flex; justify-content: center; }\r\n          .ball { display: inline-flex; align-items: center; justify-content: center; \r\n                 width: 40px; height: 40px; border-radius: 50%; margin: 0 5px; \r\n                 font-weight: bold; color: white; }\r\n          .number { background-color: #004b9f; }\r\n          .star { background-color: #fc0; color: #333; }\r\n          .footer { margin-top: 15px; font-size: 12px; text-align: center; color: #666; }\r\n        </style>\r\n      </head>\r\n      <body>\r\n        <div class=\"grid-container\">\r\n          <div class=\"grid-name\">${grid.name || 'Grille Euromillions'}</div>\r\n          <div class=\"numbers-container\">\r\n            ${grid.numbers.map(num => `<div class=\"ball number\">${num}</div>`).join('')}\r\n          </div>\r\n          <div class=\"stars-container\">\r\n            ${grid.stars.map(star => `<div class=\"ball star\">${star}</div>`).join('')}\r\n          </div>\r\n          <div class=\"footer\">Imprimé le ${new Date().toLocaleDateString()}</div>\r\n        </div>\r\n      </body>\r\n    </html>\r\n  `);\r\n  \r\n  // Fermer le document et lancer l'impression\r\n  printWindow.document.close();\r\n  printWindow.focus();\r\n  setTimeout(() => {\r\n    printWindow.print();\r\n  }, 250);\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}