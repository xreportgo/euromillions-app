{"ast":null,"code":"// src/redux/actions/statActions.js\nimport * as types from '../types';\nimport apiClient from '../../services/apiService';\n\n// Fonction pour récupérer les statistiques générales\nexport const fetchStatistics = () => async dispatch => {\n  dispatch({\n    type: types.FETCH_STATISTICS_REQUEST\n  });\n  try {\n    // Simuler une réponse pour le développement\n    // Dans une application réelle, vous feriez un appel API ici\n    // const response = await apiClient.get('/stats');\n\n    // Données de statistiques simulées pour le développement\n    const mockStatistics = {\n      numberFrequencies: Array.from({\n        length: 50\n      }, (_, i) => ({\n        number: i + 1,\n        frequency: Math.floor(Math.random() * 100) + 1\n      })).sort((a, b) => b.frequency - a.frequency),\n      starFrequencies: Array.from({\n        length: 12\n      }, (_, i) => ({\n        star: i + 1,\n        frequency: Math.floor(Math.random() * 100) + 1\n      })).sort((a, b) => b.frequency - a.frequency),\n      numberPairs: [{\n        numbers: [1, 17],\n        occurrences: 12\n      }, {\n        numbers: [23, 44],\n        occurrences: 10\n      }, {\n        numbers: [7, 32],\n        occurrences: 9\n      }],\n      patterns: [{\n        description: 'Numéros consécutifs',\n        occurrences: '15%'\n      }, {\n        description: 'Numéros tous impairs',\n        occurrences: '8%'\n      }, {\n        description: 'Numéros tous pairs',\n        occurrences: '7%'\n      }]\n    };\n    setTimeout(() => {\n      dispatch({\n        type: types.FETCH_STATISTICS_SUCCESS,\n        payload: mockStatistics\n      });\n    }, 1000); // Simule un délai de réponse\n  } catch (error) {\n    dispatch({\n      type: types.FETCH_STATISTICS_FAILURE,\n      payload: error.message || 'Une erreur est survenue lors de la récupération des statistiques'\n    });\n  }\n};","map":{"version":3,"names":["types","apiClient","fetchStatistics","dispatch","type","FETCH_STATISTICS_REQUEST","mockStatistics","numberFrequencies","Array","from","length","_","i","number","frequency","Math","floor","random","sort","a","b","starFrequencies","star","numberPairs","numbers","occurrences","patterns","description","setTimeout","FETCH_STATISTICS_SUCCESS","payload","error","FETCH_STATISTICS_FAILURE","message"],"sources":["C:/Users/Rga/euromillions-app/frontend/src/redux/actions/statActions.js"],"sourcesContent":["// src/redux/actions/statActions.js\r\nimport * as types from '../types';\r\nimport apiClient from '../../services/apiService';\r\n\r\n// Fonction pour récupérer les statistiques générales\r\nexport const fetchStatistics = () => async (dispatch) => {\r\n  dispatch({ type: types.FETCH_STATISTICS_REQUEST });\r\n  \r\n  try {\r\n    // Simuler une réponse pour le développement\r\n    // Dans une application réelle, vous feriez un appel API ici\r\n    // const response = await apiClient.get('/stats');\r\n    \r\n    // Données de statistiques simulées pour le développement\r\n    const mockStatistics = {\r\n      numberFrequencies: Array.from({ length: 50 }, (_, i) => ({\r\n        number: i + 1,\r\n        frequency: Math.floor(Math.random() * 100) + 1\r\n      })).sort((a, b) => b.frequency - a.frequency),\r\n      \r\n      starFrequencies: Array.from({ length: 12 }, (_, i) => ({\r\n        star: i + 1,\r\n        frequency: Math.floor(Math.random() * 100) + 1\r\n      })).sort((a, b) => b.frequency - a.frequency),\r\n      \r\n      numberPairs: [\r\n        { numbers: [1, 17], occurrences: 12 },\r\n        { numbers: [23, 44], occurrences: 10 },\r\n        { numbers: [7, 32], occurrences: 9 }\r\n      ],\r\n      \r\n      patterns: [\r\n        { description: 'Numéros consécutifs', occurrences: '15%' },\r\n        { description: 'Numéros tous impairs', occurrences: '8%' },\r\n        { description: 'Numéros tous pairs', occurrences: '7%' }\r\n      ]\r\n    };\r\n    \r\n    setTimeout(() => {\r\n      dispatch({\r\n        type: types.FETCH_STATISTICS_SUCCESS,\r\n        payload: mockStatistics\r\n      });\r\n    }, 1000); // Simule un délai de réponse\r\n  } catch (error) {\r\n    dispatch({\r\n      type: types.FETCH_STATISTICS_FAILURE,\r\n      payload: error.message || 'Une erreur est survenue lors de la récupération des statistiques'\r\n    });\r\n  }\r\n};\r\n"],"mappings":"AAAA;AACA,OAAO,KAAKA,KAAK,MAAM,UAAU;AACjC,OAAOC,SAAS,MAAM,2BAA2B;;AAEjD;AACA,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAM,MAAOC,QAAQ,IAAK;EACvDA,QAAQ,CAAC;IAAEC,IAAI,EAAEJ,KAAK,CAACK;EAAyB,CAAC,CAAC;EAElD,IAAI;IACF;IACA;IACA;;IAEA;IACA,MAAMC,cAAc,GAAG;MACrBC,iBAAiB,EAAEC,KAAK,CAACC,IAAI,CAAC;QAAEC,MAAM,EAAE;MAAG,CAAC,EAAE,CAACC,CAAC,EAAEC,CAAC,MAAM;QACvDC,MAAM,EAAED,CAAC,GAAG,CAAC;QACbE,SAAS,EAAEC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC,GAAG;MAC/C,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAACN,SAAS,GAAGK,CAAC,CAACL,SAAS,CAAC;MAE7CO,eAAe,EAAEb,KAAK,CAACC,IAAI,CAAC;QAAEC,MAAM,EAAE;MAAG,CAAC,EAAE,CAACC,CAAC,EAAEC,CAAC,MAAM;QACrDU,IAAI,EAAEV,CAAC,GAAG,CAAC;QACXE,SAAS,EAAEC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC,GAAG;MAC/C,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAACN,SAAS,GAAGK,CAAC,CAACL,SAAS,CAAC;MAE7CS,WAAW,EAAE,CACX;QAAEC,OAAO,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC;QAAEC,WAAW,EAAE;MAAG,CAAC,EACrC;QAAED,OAAO,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC;QAAEC,WAAW,EAAE;MAAG,CAAC,EACtC;QAAED,OAAO,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC;QAAEC,WAAW,EAAE;MAAE,CAAC,CACrC;MAEDC,QAAQ,EAAE,CACR;QAAEC,WAAW,EAAE,qBAAqB;QAAEF,WAAW,EAAE;MAAM,CAAC,EAC1D;QAAEE,WAAW,EAAE,sBAAsB;QAAEF,WAAW,EAAE;MAAK,CAAC,EAC1D;QAAEE,WAAW,EAAE,oBAAoB;QAAEF,WAAW,EAAE;MAAK,CAAC;IAE5D,CAAC;IAEDG,UAAU,CAAC,MAAM;MACfzB,QAAQ,CAAC;QACPC,IAAI,EAAEJ,KAAK,CAAC6B,wBAAwB;QACpCC,OAAO,EAAExB;MACX,CAAC,CAAC;IACJ,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;EACZ,CAAC,CAAC,OAAOyB,KAAK,EAAE;IACd5B,QAAQ,CAAC;MACPC,IAAI,EAAEJ,KAAK,CAACgC,wBAAwB;MACpCF,OAAO,EAAEC,KAAK,CAACE,OAAO,IAAI;IAC5B,CAAC,CAAC;EACJ;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}