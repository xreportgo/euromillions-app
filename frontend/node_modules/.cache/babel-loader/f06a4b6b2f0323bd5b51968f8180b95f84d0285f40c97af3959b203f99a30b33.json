{"ast":null,"code":"/**\r\n * Module pour les appels API\r\n */\nimport axios from 'axios';\n\n// Création d'une instance axios avec configuration de base\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || '/api',\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n  }\n});\n\n// Intercepteur pour gérer les erreurs globalement\napi.interceptors.response.use(response => response, error => {\n  // Log l'erreur\n  console.error('API Error:', error.response || error.message);\n\n  // Réécrire l'erreur pour une meilleure utilisation dans l'application\n  if (error.response) {\n    return Promise.reject({\n      status: error.response.status,\n      message: error.response.data.message || 'Une erreur est survenue',\n      details: error.response.data.details || null\n    });\n  }\n  return Promise.reject({\n    status: 500,\n    message: error.message || 'Erreur de connexion au serveur',\n    details: null\n  });\n});\n\n// API des tirages\nexport const drawsApi = {\n  // Récupérer tous les tirages avec pagination\n  getAll: (page = 1, limit = 10) => api.get(`/draws?page=${page}&limit=${limit}`),\n  // Récupérer le dernier tirage\n  getLatest: () => api.get('/draws/latest'),\n  // Récupérer un tirage par ID\n  getById: id => api.get(`/draws/${id}`),\n  // Récupérer un tirage par date\n  getByDate: date => api.get(`/draws/date/${date}`),\n  // Ajouter un nouveau tirage\n  add: drawData => api.post('/draws', drawData),\n  // Mettre à jour un tirage\n  update: (id, drawData) => api.put(`/draws/${id}`, drawData),\n  // Supprimer un tirage\n  delete: id => api.delete(`/draws/${id}`)\n};\n\n// API des prédictions\nexport const predictionsApi = {\n  // Générer une prédiction\n  generate: (method = 'frequency') => api.get(`/predictions?method=${method}`)\n};\n\n// API des statistiques\nexport const statsApi = {\n  // Récupérer les statistiques générales\n  getGeneral: () => api.get('/stats'),\n  // Récupérer les fréquences des numéros\n  getNumberFrequencies: () => api.get('/stats/numbers'),\n  // Récupérer les fréquences des étoiles\n  getStarFrequencies: () => api.get('/stats/stars'),\n  // Récupérer les statistiques des intervalles\n  getIntervalStats: () => api.get('/stats/intervals')\n};\n\n// API des grilles\nexport const gridsApi = {\n  // Récupérer toutes les grilles de l'utilisateur\n  getAll: () => api.get('/grids'),\n  // Récupérer une grille par ID\n  getById: id => api.get(`/grids/${id}`),\n  // Ajouter une nouvelle grille\n  add: gridData => api.post('/grids', gridData),\n  // Mettre à jour une grille\n  update: (id, gridData) => api.put(`/grids/${id}`, gridData),\n  // Supprimer une grille\n  delete: id => api.delete(`/grids/${id}`)\n};\nexport default {\n  draws: drawsApi,\n  predictions: predictionsApi,\n  stats: statsApi,\n  grids: gridsApi\n};","map":{"version":3,"names":["axios","api","create","baseURL","process","env","REACT_APP_API_URL","timeout","headers","interceptors","response","use","error","console","message","Promise","reject","status","data","details","drawsApi","getAll","page","limit","get","getLatest","getById","id","getByDate","date","add","drawData","post","update","put","delete","predictionsApi","generate","method","statsApi","getGeneral","getNumberFrequencies","getStarFrequencies","getIntervalStats","gridsApi","gridData","draws","predictions","stats","grids"],"sources":["C:/Users/Rga/Desktop/HelloEuro/euromillions-app/frontend/src/utils/api.js"],"sourcesContent":["/**\r\n * Module pour les appels API\r\n */\r\nimport axios from 'axios';\r\n\r\n// Création d'une instance axios avec configuration de base\r\nconst api = axios.create({\r\n  baseURL: process.env.REACT_APP_API_URL || '/api',\r\n  timeout: 10000,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n    'Accept': 'application/json'\r\n  }\r\n});\r\n\r\n// Intercepteur pour gérer les erreurs globalement\r\napi.interceptors.response.use(\r\n  response => response,\r\n  error => {\r\n    // Log l'erreur\r\n    console.error('API Error:', error.response || error.message);\r\n    \r\n    // Réécrire l'erreur pour une meilleure utilisation dans l'application\r\n    if (error.response) {\r\n      return Promise.reject({\r\n        status: error.response.status,\r\n        message: error.response.data.message || 'Une erreur est survenue',\r\n        details: error.response.data.details || null\r\n      });\r\n    }\r\n    \r\n    return Promise.reject({\r\n      status: 500,\r\n      message: error.message || 'Erreur de connexion au serveur',\r\n      details: null\r\n    });\r\n  }\r\n);\r\n\r\n// API des tirages\r\nexport const drawsApi = {\r\n  // Récupérer tous les tirages avec pagination\r\n  getAll: (page = 1, limit = 10) => api.get(`/draws?page=${page}&limit=${limit}`),\r\n  \r\n  // Récupérer le dernier tirage\r\n  getLatest: () => api.get('/draws/latest'),\r\n  \r\n  // Récupérer un tirage par ID\r\n  getById: (id) => api.get(`/draws/${id}`),\r\n  \r\n  // Récupérer un tirage par date\r\n  getByDate: (date) => api.get(`/draws/date/${date}`),\r\n  \r\n  // Ajouter un nouveau tirage\r\n  add: (drawData) => api.post('/draws', drawData),\r\n  \r\n  // Mettre à jour un tirage\r\n  update: (id, drawData) => api.put(`/draws/${id}`, drawData),\r\n  \r\n  // Supprimer un tirage\r\n  delete: (id) => api.delete(`/draws/${id}`)\r\n};\r\n\r\n// API des prédictions\r\nexport const predictionsApi = {\r\n  // Générer une prédiction\r\n  generate: (method = 'frequency') => api.get(`/predictions?method=${method}`)\r\n};\r\n\r\n// API des statistiques\r\nexport const statsApi = {\r\n  // Récupérer les statistiques générales\r\n  getGeneral: () => api.get('/stats'),\r\n  \r\n  // Récupérer les fréquences des numéros\r\n  getNumberFrequencies: () => api.get('/stats/numbers'),\r\n  \r\n  // Récupérer les fréquences des étoiles\r\n  getStarFrequencies: () => api.get('/stats/stars'),\r\n  \r\n  // Récupérer les statistiques des intervalles\r\n  getIntervalStats: () => api.get('/stats/intervals')\r\n};\r\n\r\n// API des grilles\r\nexport const gridsApi = {\r\n  // Récupérer toutes les grilles de l'utilisateur\r\n  getAll: () => api.get('/grids'),\r\n  \r\n  // Récupérer une grille par ID\r\n  getById: (id) => api.get(`/grids/${id}`),\r\n  \r\n  // Ajouter une nouvelle grille\r\n  add: (gridData) => api.post('/grids', gridData),\r\n  \r\n  // Mettre à jour une grille\r\n  update: (id, gridData) => api.put(`/grids/${id}`, gridData),\r\n  \r\n  // Supprimer une grille\r\n  delete: (id) => api.delete(`/grids/${id}`)\r\n};\r\n\r\nexport default {\r\n  draws: drawsApi,\r\n  predictions: predictionsApi,\r\n  stats: statsApi,\r\n  grids: gridsApi\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}