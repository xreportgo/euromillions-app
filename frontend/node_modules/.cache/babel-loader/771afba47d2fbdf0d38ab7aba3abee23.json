{"ast":null,"code":"// src/redux/actions/drawActions.js\nimport * as types from '../types';\nimport apiClient from '../../services/apiService';\n\n// Fonction pour récupérer les derniers tirages\nexport const fetchLatestDraws = () => async dispatch => {\n  dispatch({\n    type: types.FETCH_LATEST_DRAWS_REQUEST\n  });\n  try {\n    // Simuler une réponse pour le développement\n    // Dans une application réelle, vous feriez un appel API ici\n    // const response = await apiClient.get('/draws/latest');\n\n    // Données de tirage simulées pour le développement\n    const mockLatestDraw = {\n      id: '1',\n      date: new Date().toISOString(),\n      numbers: [5, 15, 23, 32, 45],\n      stars: [2, 7]\n    };\n    setTimeout(() => {\n      dispatch({\n        type: types.FETCH_LATEST_DRAWS_SUCCESS,\n        payload: mockLatestDraw\n      });\n    }, 1000); // Simule un délai de réponse\n  } catch (error) {\n    dispatch({\n      type: types.FETCH_LATEST_DRAWS_FAILURE,\n      payload: error.message || 'Une erreur est survenue lors de la récupération des tirages'\n    });\n  }\n};\n\n// Fonction pour récupérer l'historique des tirages\nexport const fetchDrawHistory = (page = 1, limit = 10) => async dispatch => {\n  dispatch({\n    type: types.FETCH_DRAW_HISTORY_REQUEST\n  });\n  try {\n    // Simuler une réponse pour le développement\n    // Dans une application réelle, vous feriez un appel API ici\n    // const response = await apiClient.get(`/draws?page=${page}&limit=${limit}`);\n\n    // Données d'historique simulées pour le développement\n    const mockDrawHistory = Array.from({\n      length: 10\n    }, (_, i) => ({\n      id: `${i + 1}`,\n      date: new Date(Date.now() - i * 7 * 24 * 60 * 60 * 1000).toISOString(),\n      // i semaines en arrière\n      numbers: [Math.floor(Math.random() * 50) + 1, Math.floor(Math.random() * 50) + 1, Math.floor(Math.random() * 50) + 1, Math.floor(Math.random() * 50) + 1, Math.floor(Math.random() * 50) + 1].sort((a, b) => a - b),\n      stars: [Math.floor(Math.random() * 12) + 1, Math.floor(Math.random() * 12) + 1].sort((a, b) => a - b)\n    }));\n    setTimeout(() => {\n      dispatch({\n        type: types.FETCH_DRAW_HISTORY_SUCCESS,\n        payload: {\n          draws: mockDrawHistory,\n          pagination: {\n            page,\n            limit,\n            total: 100 // Nombre total simulé de tirages\n          }\n        }\n      });\n    }, 1000); // Simule un délai de réponse\n  } catch (error) {\n    dispatch({\n      type: types.FETCH_DRAW_HISTORY_FAILURE,\n      payload: error.message || 'Une erreur est survenue lors de la récupération de l\\'historique'\n    });\n  }\n};","map":{"version":3,"names":["types","apiClient","fetchLatestDraws","dispatch","type","FETCH_LATEST_DRAWS_REQUEST","mockLatestDraw","id","date","Date","toISOString","numbers","stars","setTimeout","FETCH_LATEST_DRAWS_SUCCESS","payload","error","FETCH_LATEST_DRAWS_FAILURE","message","fetchDrawHistory","page","limit","FETCH_DRAW_HISTORY_REQUEST","mockDrawHistory","Array","from","length","_","i","now","Math","floor","random","sort","a","b","FETCH_DRAW_HISTORY_SUCCESS","draws","pagination","total","FETCH_DRAW_HISTORY_FAILURE"],"sources":["C:/Users/Rga/euromillions-app/frontend/src/redux/actions/drawActions.js"],"sourcesContent":["// src/redux/actions/drawActions.js\r\nimport * as types from '../types';\r\nimport apiClient from '../../services/apiService';\r\n\r\n// Fonction pour récupérer les derniers tirages\r\nexport const fetchLatestDraws = () => async (dispatch) => {\r\n  dispatch({ type: types.FETCH_LATEST_DRAWS_REQUEST });\r\n  \r\n  try {\r\n    // Simuler une réponse pour le développement\r\n    // Dans une application réelle, vous feriez un appel API ici\r\n    // const response = await apiClient.get('/draws/latest');\r\n    \r\n    // Données de tirage simulées pour le développement\r\n    const mockLatestDraw = {\r\n      id: '1',\r\n      date: new Date().toISOString(),\r\n      numbers: [5, 15, 23, 32, 45],\r\n      stars: [2, 7]\r\n    };\r\n    \r\n    setTimeout(() => {\r\n      dispatch({\r\n        type: types.FETCH_LATEST_DRAWS_SUCCESS,\r\n        payload: mockLatestDraw\r\n      });\r\n    }, 1000); // Simule un délai de réponse\r\n  } catch (error) {\r\n    dispatch({\r\n      type: types.FETCH_LATEST_DRAWS_FAILURE,\r\n      payload: error.message || 'Une erreur est survenue lors de la récupération des tirages'\r\n    });\r\n  }\r\n};\r\n\r\n// Fonction pour récupérer l'historique des tirages\r\nexport const fetchDrawHistory = (page = 1, limit = 10) => async (dispatch) => {\r\n  dispatch({ type: types.FETCH_DRAW_HISTORY_REQUEST });\r\n  \r\n  try {\r\n    // Simuler une réponse pour le développement\r\n    // Dans une application réelle, vous feriez un appel API ici\r\n    // const response = await apiClient.get(`/draws?page=${page}&limit=${limit}`);\r\n    \r\n    // Données d'historique simulées pour le développement\r\n    const mockDrawHistory = Array.from({ length: 10 }, (_, i) => ({\r\n      id: `${i + 1}`,\r\n      date: new Date(Date.now() - i * 7 * 24 * 60 * 60 * 1000).toISOString(), // i semaines en arrière\r\n      numbers: [\r\n        Math.floor(Math.random() * 50) + 1,\r\n        Math.floor(Math.random() * 50) + 1,\r\n        Math.floor(Math.random() * 50) + 1,\r\n        Math.floor(Math.random() * 50) + 1,\r\n        Math.floor(Math.random() * 50) + 1\r\n      ].sort((a, b) => a - b),\r\n      stars: [\r\n        Math.floor(Math.random() * 12) + 1,\r\n        Math.floor(Math.random() * 12) + 1\r\n      ].sort((a, b) => a - b)\r\n    }));\r\n    \r\n    setTimeout(() => {\r\n      dispatch({\r\n        type: types.FETCH_DRAW_HISTORY_SUCCESS,\r\n        payload: {\r\n          draws: mockDrawHistory,\r\n          pagination: {\r\n            page,\r\n            limit,\r\n            total: 100 // Nombre total simulé de tirages\r\n          }\r\n        }\r\n      });\r\n    }, 1000); // Simule un délai de réponse\r\n  } catch (error) {\r\n    dispatch({\r\n      type: types.FETCH_DRAW_HISTORY_FAILURE,\r\n      payload: error.message || 'Une erreur est survenue lors de la récupération de l\\'historique'\r\n    });\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}