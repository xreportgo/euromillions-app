{"ast":null,"code":"// src/services/gridService.js\nimport axios from 'axios';\n\n// Configuration pour l'API\nconst API_BASE_URL = process.env.REACT_APP_API_URL || '/api';\n\n// Clé de stockage local pour les grilles\nconst STORED_GRIDS_KEY = 'euromillions_saved_grids';\n\n/**\r\n * Récupère toutes les grilles sauvegardées\r\n * @returns {Promise<Array>} Liste des grilles sauvegardées\r\n */\nexport const getStoredGrids = async () => {\n  try {\n    // Essayer d'abord de récupérer depuis l'API\n    try {\n      const response = await axios.get(`${API_BASE_URL}/grids`);\n      console.log('Grilles récupérées depuis l\\'API:', response.data);\n      return response.data;\n    } catch (apiError) {\n      console.warn('Impossible de récupérer les grilles depuis l\\'API, fallback sur le stockage local:', apiError);\n      // En cas d'erreur API, fallback sur le stockage local\n      const storedGrids = localStorage.getItem(STORED_GRIDS_KEY);\n      return storedGrids ? JSON.parse(storedGrids) : [];\n    }\n  } catch (error) {\n    console.error('Erreur lors de la récupération des grilles:', error);\n    // En cas d'erreur générale, renvoyer un tableau vide\n    return [];\n  }\n};\n\n/**\r\n * Sauvegarde une nouvelle grille\r\n * @param {Object} grid La grille à sauvegarder\r\n * @returns {Promise<Object>} La grille sauvegardée avec son ID\r\n */\nexport const saveGrid = async grid => {\n  try {\n    // Essayer d'abord de sauvegarder via l'API\n    try {\n      const response = await axios.post(`${API_BASE_URL}/grids`, grid);\n      console.log('Grille sauvegardée via l\\'API:', response.data);\n      return response.data;\n    } catch (apiError) {\n      console.warn('Impossible de sauvegarder la grille via l\\'API, fallback sur le stockage local:', apiError);\n\n      // En cas d'erreur API, fallback sur le stockage local\n      const storedGrids = await getStoredGrids();\n\n      // Créer une nouvelle grille avec un ID unique\n      const newGrid = {\n        ...grid,\n        id: Date.now().toString(),\n        createdAt: new Date().toISOString()\n      };\n\n      // Ajouter la nouvelle grille à la liste\n      const updatedGrids = [...storedGrids, newGrid];\n\n      // Sauvegarder la liste mise à jour\n      localStorage.setItem(STORED_GRIDS_KEY, JSON.stringify(updatedGrids));\n      console.log('Grille sauvegardée localement:', newGrid);\n      return newGrid;\n    }\n  } catch (error) {\n    console.error('Erreur lors de la sauvegarde de la grille:', error);\n    throw new Error('Impossible de sauvegarder la grille');\n  }\n};\n\n/**\r\n * Récupère une grille par son ID\r\n * @param {string} id L'ID de la grille à récupérer\r\n * @returns {Promise<Object|null>} La grille trouvée ou null\r\n */\nexport const getGridById = async id => {\n  try {\n    // Essayer d'abord de récupérer depuis l'API\n    try {\n      const response = await axios.get(`${API_BASE_URL}/grids/${id}`);\n      return response.data;\n    } catch (apiError) {\n      console.warn(`Impossible de récupérer la grille ${id} depuis l\\'API, fallback sur le stockage local:`, apiError);\n\n      // En cas d'erreur API, fallback sur le stockage local\n      const storedGrids = await getStoredGrids();\n      return storedGrids.find(grid => grid.id === id) || null;\n    }\n  } catch (error) {\n    console.error(`Erreur lors de la récupération de la grille ${id}:`, error);\n    return null;\n  }\n};\n\n/**\r\n * Supprime une grille par son ID\r\n * @param {string} id L'ID de la grille à supprimer\r\n * @returns {Promise<boolean>} True si la suppression a réussi\r\n */\nexport const deleteGrid = async id => {\n  try {\n    // Essayer d'abord de supprimer via l'API\n    try {\n      await axios.delete(`${API_BASE_URL}/grids/${id}`);\n      return true;\n    } catch (apiError) {\n      console.warn(`Impossible de supprimer la grille ${id} via l\\'API, fallback sur le stockage local:`, apiError);\n\n      // En cas d'erreur API, fallback sur le stockage local\n      const storedGrids = await getStoredGrids();\n      const updatedGrids = storedGrids.filter(grid => grid.id !== id);\n      if (updatedGrids.length === storedGrids.length) {\n        return false; // Grille non trouvée\n      }\n      localStorage.setItem(STORED_GRIDS_KEY, JSON.stringify(updatedGrids));\n      return true;\n    }\n  } catch (error) {\n    console.error(`Erreur lors de la suppression de la grille ${id}:`, error);\n    throw new Error('Impossible de supprimer la grille');\n  }\n};\n\n/**\r\n * Met à jour une grille existante\r\n * @param {string} id L'ID de la grille à mettre à jour\r\n * @param {Object} updatedGrid Les nouvelles données de la grille\r\n * @returns {Promise<Object>} La grille mise à jour\r\n */\nexport const updateGrid = async (id, updatedGrid) => {\n  try {\n    // Essayer d'abord de mettre à jour via l'API\n    try {\n      const response = await axios.put(`${API_BASE_URL}/grids/${id}`, updatedGrid);\n      return response.data;\n    } catch (apiError) {\n      console.warn(`Impossible de mettre à jour la grille ${id} via l\\'API, fallback sur le stockage local:`, apiError);\n\n      // En cas d'erreur API, fallback sur le stockage local\n      const storedGrids = await getStoredGrids();\n      const existingGridIndex = storedGrids.findIndex(grid => grid.id === id);\n      if (existingGridIndex === -1) {\n        throw new Error(`Grille avec l'ID ${id} non trouvée`);\n      }\n      const gridToUpdate = {\n        ...storedGrids[existingGridIndex],\n        ...updatedGrid,\n        updatedAt: new Date().toISOString()\n      };\n      const updatedGrids = [...storedGrids];\n      updatedGrids[existingGridIndex] = gridToUpdate;\n      localStorage.setItem(STORED_GRIDS_KEY, JSON.stringify(updatedGrids));\n      return gridToUpdate;\n    }\n  } catch (error) {\n    console.error(`Erreur lors de la mise à jour de la grille ${id}:`, error);\n    throw new Error('Impossible de mettre à jour la grille');\n  }\n};\n\n/**\r\n * Vérifie une grille par rapport au dernier tirage\r\n * @param {Object} grid La grille à vérifier\r\n * @param {Object} draw Le tirage à comparer\r\n * @returns {Object} Résultats de la vérification\r\n */\nexport const checkGrid = (grid, draw) => {\n  if (!grid || !draw || !grid.numbers || !grid.stars || !draw.numbers || !draw.stars) {\n    return {\n      matchedNumbers: [],\n      matchedStars: [],\n      totalMatched: 0,\n      prize: 0\n    };\n  }\n  const matchedNumbers = grid.numbers.filter(number => draw.numbers.includes(number));\n  const matchedStars = grid.stars.filter(star => draw.stars.includes(star));\n  const totalMatched = matchedNumbers.length + matchedStars.length;\n\n  // Calcul simplifié des gains (à adapter selon les règles réelles)\n  let prize = 0;\n  if (matchedNumbers.length === 5 && matchedStars.length === 2) {\n    prize = 'Jackpot';\n  } else if (matchedNumbers.length === 5 && matchedStars.length === 1) {\n    prize = '500 000 €';\n  } else if (matchedNumbers.length === 5) {\n    prize = '50 000 €';\n  } else if (matchedNumbers.length === 4 && matchedStars.length === 2) {\n    prize = '5 000 €';\n  } else if (matchedNumbers.length === 4 && matchedStars.length === 1) {\n    prize = '500 €';\n  } else if (matchedNumbers.length === 3 && matchedStars.length === 2) {\n    prize = '100 €';\n  } else if (matchedNumbers.length === 4) {\n    prize = '50 €';\n  } else if (matchedNumbers.length === 2 && matchedStars.length === 2) {\n    prize = '20 €';\n  } else if (matchedNumbers.length === 3 && matchedStars.length === 1) {\n    prize = '15 €';\n  } else if (matchedNumbers.length === 3) {\n    prize = '10 €';\n  } else if (matchedNumbers.length === 1 && matchedStars.length === 2) {\n    prize = '10 €';\n  } else if (matchedNumbers.length === 2 && matchedStars.length === 1) {\n    prize = '8 €';\n  } else if (matchedNumbers.length === 2) {\n    prize = '4 €';\n  }\n  return {\n    matchedNumbers,\n    matchedStars,\n    totalMatched,\n    prize\n  };\n};\nexport default {\n  getStoredGrids,\n  saveGrid,\n  getGridById,\n  deleteGrid,\n  updateGrid,\n  checkGrid\n};","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","STORED_GRIDS_KEY","getStoredGrids","response","get","console","log","data","apiError","warn","storedGrids","localStorage","getItem","JSON","parse","error","saveGrid","grid","post","newGrid","id","Date","now","toString","createdAt","toISOString","updatedGrids","setItem","stringify","Error","getGridById","find","deleteGrid","delete","filter","length","updateGrid","updatedGrid","put","existingGridIndex","findIndex","gridToUpdate","updatedAt","checkGrid","draw","numbers","stars","matchedNumbers","matchedStars","totalMatched","prize","number","includes","star"],"sources":["C:/Users/Rga/Desktop/HelloEuro/euromillions-app/frontend/src/services/gridService.js"],"sourcesContent":["// src/services/gridService.js\r\nimport axios from 'axios';\r\n\r\n// Configuration pour l'API\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || '/api';\r\n\r\n// Clé de stockage local pour les grilles\r\nconst STORED_GRIDS_KEY = 'euromillions_saved_grids';\r\n\r\n/**\r\n * Récupère toutes les grilles sauvegardées\r\n * @returns {Promise<Array>} Liste des grilles sauvegardées\r\n */\r\nexport const getStoredGrids = async () => {\r\n  try {\r\n    // Essayer d'abord de récupérer depuis l'API\r\n    try {\r\n      const response = await axios.get(`${API_BASE_URL}/grids`);\r\n      console.log('Grilles récupérées depuis l\\'API:', response.data);\r\n      return response.data;\r\n    } catch (apiError) {\r\n      console.warn('Impossible de récupérer les grilles depuis l\\'API, fallback sur le stockage local:', apiError);\r\n      // En cas d'erreur API, fallback sur le stockage local\r\n      const storedGrids = localStorage.getItem(STORED_GRIDS_KEY);\r\n      return storedGrids ? JSON.parse(storedGrids) : [];\r\n    }\r\n  } catch (error) {\r\n    console.error('Erreur lors de la récupération des grilles:', error);\r\n    // En cas d'erreur générale, renvoyer un tableau vide\r\n    return [];\r\n  }\r\n};\r\n\r\n/**\r\n * Sauvegarde une nouvelle grille\r\n * @param {Object} grid La grille à sauvegarder\r\n * @returns {Promise<Object>} La grille sauvegardée avec son ID\r\n */\r\nexport const saveGrid = async (grid) => {\r\n  try {\r\n    // Essayer d'abord de sauvegarder via l'API\r\n    try {\r\n      const response = await axios.post(`${API_BASE_URL}/grids`, grid);\r\n      console.log('Grille sauvegardée via l\\'API:', response.data);\r\n      return response.data;\r\n    } catch (apiError) {\r\n      console.warn('Impossible de sauvegarder la grille via l\\'API, fallback sur le stockage local:', apiError);\r\n      \r\n      // En cas d'erreur API, fallback sur le stockage local\r\n      const storedGrids = await getStoredGrids();\r\n      \r\n      // Créer une nouvelle grille avec un ID unique\r\n      const newGrid = {\r\n        ...grid,\r\n        id: Date.now().toString(),\r\n        createdAt: new Date().toISOString()\r\n      };\r\n      \r\n      // Ajouter la nouvelle grille à la liste\r\n      const updatedGrids = [...storedGrids, newGrid];\r\n      \r\n      // Sauvegarder la liste mise à jour\r\n      localStorage.setItem(STORED_GRIDS_KEY, JSON.stringify(updatedGrids));\r\n      \r\n      console.log('Grille sauvegardée localement:', newGrid);\r\n      return newGrid;\r\n    }\r\n  } catch (error) {\r\n    console.error('Erreur lors de la sauvegarde de la grille:', error);\r\n    throw new Error('Impossible de sauvegarder la grille');\r\n  }\r\n};\r\n\r\n/**\r\n * Récupère une grille par son ID\r\n * @param {string} id L'ID de la grille à récupérer\r\n * @returns {Promise<Object|null>} La grille trouvée ou null\r\n */\r\nexport const getGridById = async (id) => {\r\n  try {\r\n    // Essayer d'abord de récupérer depuis l'API\r\n    try {\r\n      const response = await axios.get(`${API_BASE_URL}/grids/${id}`);\r\n      return response.data;\r\n    } catch (apiError) {\r\n      console.warn(`Impossible de récupérer la grille ${id} depuis l\\'API, fallback sur le stockage local:`, apiError);\r\n      \r\n      // En cas d'erreur API, fallback sur le stockage local\r\n      const storedGrids = await getStoredGrids();\r\n      return storedGrids.find(grid => grid.id === id) || null;\r\n    }\r\n  } catch (error) {\r\n    console.error(`Erreur lors de la récupération de la grille ${id}:`, error);\r\n    return null;\r\n  }\r\n};\r\n\r\n/**\r\n * Supprime une grille par son ID\r\n * @param {string} id L'ID de la grille à supprimer\r\n * @returns {Promise<boolean>} True si la suppression a réussi\r\n */\r\nexport const deleteGrid = async (id) => {\r\n  try {\r\n    // Essayer d'abord de supprimer via l'API\r\n    try {\r\n      await axios.delete(`${API_BASE_URL}/grids/${id}`);\r\n      return true;\r\n    } catch (apiError) {\r\n      console.warn(`Impossible de supprimer la grille ${id} via l\\'API, fallback sur le stockage local:`, apiError);\r\n      \r\n      // En cas d'erreur API, fallback sur le stockage local\r\n      const storedGrids = await getStoredGrids();\r\n      const updatedGrids = storedGrids.filter(grid => grid.id !== id);\r\n      \r\n      if (updatedGrids.length === storedGrids.length) {\r\n        return false; // Grille non trouvée\r\n      }\r\n      \r\n      localStorage.setItem(STORED_GRIDS_KEY, JSON.stringify(updatedGrids));\r\n      return true;\r\n    }\r\n  } catch (error) {\r\n    console.error(`Erreur lors de la suppression de la grille ${id}:`, error);\r\n    throw new Error('Impossible de supprimer la grille');\r\n  }\r\n};\r\n\r\n/**\r\n * Met à jour une grille existante\r\n * @param {string} id L'ID de la grille à mettre à jour\r\n * @param {Object} updatedGrid Les nouvelles données de la grille\r\n * @returns {Promise<Object>} La grille mise à jour\r\n */\r\nexport const updateGrid = async (id, updatedGrid) => {\r\n  try {\r\n    // Essayer d'abord de mettre à jour via l'API\r\n    try {\r\n      const response = await axios.put(`${API_BASE_URL}/grids/${id}`, updatedGrid);\r\n      return response.data;\r\n    } catch (apiError) {\r\n      console.warn(`Impossible de mettre à jour la grille ${id} via l\\'API, fallback sur le stockage local:`, apiError);\r\n      \r\n      // En cas d'erreur API, fallback sur le stockage local\r\n      const storedGrids = await getStoredGrids();\r\n      const existingGridIndex = storedGrids.findIndex(grid => grid.id === id);\r\n      \r\n      if (existingGridIndex === -1) {\r\n        throw new Error(`Grille avec l'ID ${id} non trouvée`);\r\n      }\r\n      \r\n      const gridToUpdate = {\r\n        ...storedGrids[existingGridIndex],\r\n        ...updatedGrid,\r\n        updatedAt: new Date().toISOString()\r\n      };\r\n      \r\n      const updatedGrids = [...storedGrids];\r\n      updatedGrids[existingGridIndex] = gridToUpdate;\r\n      \r\n      localStorage.setItem(STORED_GRIDS_KEY, JSON.stringify(updatedGrids));\r\n      \r\n      return gridToUpdate;\r\n    }\r\n  } catch (error) {\r\n    console.error(`Erreur lors de la mise à jour de la grille ${id}:`, error);\r\n    throw new Error('Impossible de mettre à jour la grille');\r\n  }\r\n};\r\n\r\n/**\r\n * Vérifie une grille par rapport au dernier tirage\r\n * @param {Object} grid La grille à vérifier\r\n * @param {Object} draw Le tirage à comparer\r\n * @returns {Object} Résultats de la vérification\r\n */\r\nexport const checkGrid = (grid, draw) => {\r\n  if (!grid || !draw || !grid.numbers || !grid.stars || !draw.numbers || !draw.stars) {\r\n    return {\r\n      matchedNumbers: [],\r\n      matchedStars: [],\r\n      totalMatched: 0,\r\n      prize: 0\r\n    };\r\n  }\r\n  \r\n  const matchedNumbers = grid.numbers.filter(number => \r\n    draw.numbers.includes(number)\r\n  );\r\n  \r\n  const matchedStars = grid.stars.filter(star =>\r\n    draw.stars.includes(star)\r\n  );\r\n  \r\n  const totalMatched = matchedNumbers.length + matchedStars.length;\r\n  \r\n  // Calcul simplifié des gains (à adapter selon les règles réelles)\r\n  let prize = 0;\r\n  if (matchedNumbers.length === 5 && matchedStars.length === 2) {\r\n    prize = 'Jackpot';\r\n  } else if (matchedNumbers.length === 5 && matchedStars.length === 1) {\r\n    prize = '500 000 €';\r\n  } else if (matchedNumbers.length === 5) {\r\n    prize = '50 000 €';\r\n  } else if (matchedNumbers.length === 4 && matchedStars.length === 2) {\r\n    prize = '5 000 €';\r\n  } else if (matchedNumbers.length === 4 && matchedStars.length === 1) {\r\n    prize = '500 €';\r\n  } else if (matchedNumbers.length === 3 && matchedStars.length === 2) {\r\n    prize = '100 €';\r\n  } else if (matchedNumbers.length === 4) {\r\n    prize = '50 €';\r\n  } else if (matchedNumbers.length === 2 && matchedStars.length === 2) {\r\n    prize = '20 €';\r\n  } else if (matchedNumbers.length === 3 && matchedStars.length === 1) {\r\n    prize = '15 €';\r\n  } else if (matchedNumbers.length === 3) {\r\n    prize = '10 €';\r\n  } else if (matchedNumbers.length === 1 && matchedStars.length === 2) {\r\n    prize = '10 €';\r\n  } else if (matchedNumbers.length === 2 && matchedStars.length === 1) {\r\n    prize = '8 €';\r\n  } else if (matchedNumbers.length === 2) {\r\n    prize = '4 €';\r\n  }\r\n  \r\n  return {\r\n    matchedNumbers,\r\n    matchedStars,\r\n    totalMatched,\r\n    prize\r\n  };\r\n};\r\n\r\nexport default {\r\n  getStoredGrids,\r\n  saveGrid,\r\n  getGridById,\r\n  deleteGrid,\r\n  updateGrid,\r\n  checkGrid\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}