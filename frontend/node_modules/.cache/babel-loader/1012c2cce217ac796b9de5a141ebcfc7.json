{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rga\\\\euromillions-app\\\\frontend\\\\src\\\\pages\\\\GenerateGrid.js\",\n  _s = $RefreshSig$();\n// pages/GenerateGrid.js\nimport React, { useState, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useDispatch } from 'react-redux';\nimport { useNavigate } from 'react-router-dom'; // Import pour la redirection\nimport GridGenerator from '../components/grids/GridGenerator';\nimport GridCard from '../components/grids/GridCard';\nimport { generateGrids, printGrid } from '../services/gridService';\nimport { saveGrid } from '../redux/actions/gridActions';\nimport toast from '../utils/toast'; // Si vous utilisez react-toastify pour les notifications\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst GenerateGrid = () => {\n  _s();\n  const {\n    t\n  } = useTranslation();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const [generatedGrids, setGeneratedGrids] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [savedGrids, setSavedGrids] = useState([]); // Pour suivre les grilles déjà sauvegardées\n\n  const generationModels = [{\n    id: 'random',\n    name: t('randomModel'),\n    description: t('randomModelDescription')\n  }, {\n    id: 'frequency',\n    name: t('frequencyModel'),\n    description: t('frequencyModelDescription')\n  }, {\n    id: 'hot_numbers',\n    name: t('hotNumbersModel'),\n    description: t('hotNumbersModelDescription')\n  }\n  // Autres modèles...\n  ];\n  const handleGenerate = async options => {\n    try {\n      setLoading(true);\n      setError(null);\n      const result = await generateGrids(options);\n      setGeneratedGrids(result);\n      // Réinitialiser les grilles sauvegardées lors d'une nouvelle génération\n      setSavedGrids([]);\n    } catch (err) {\n      setError(err.message || t('generationError'));\n      console.error('Error generating grids:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleSave = async grid => {\n    try {\n      // Vérifier si la grille a déjà été sauvegardée\n      if (savedGrids.includes(grid.id)) {\n        toast.info(t('gridAlreadySaved'));\n        return;\n      }\n\n      // Ajouter un nom par défaut si nécessaire\n      const gridToSave = {\n        ...grid,\n        name: grid.name || t('gridGeneratedOn', {\n          date: new Date().toLocaleDateString()\n        })\n      };\n      const savedGrid = await dispatch(saveGrid(gridToSave));\n\n      // Ajouter l'ID à la liste des grilles sauvegardées\n      setSavedGrids([...savedGrids, grid.id]);\n      toast.success(t('gridSavedSuccessfully'));\n\n      // Option: rediriger vers la page des grilles sauvegardées\n      // navigate('/saved-grids');\n    } catch (err) {\n      toast.error(t('errorSavingGrid'));\n      console.error('Error saving grid:', err);\n    }\n  };\n  const handlePrint = grid => {\n    printGrid(grid);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mx-auto px-4 py-8\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-2xl font-bold mb-6\",\n      children: t('generateGrids')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-white dark:bg-gray-800 rounded-lg shadow p-6 mb-8\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-xl font-semibold mb-4\",\n        children: t('gridGenerationOptions')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(GridGenerator, {\n        onGenerate: handleGenerate,\n        models: generationModels\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-center py-8\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500 mx-auto\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"mt-4\",\n        children: t('generatingGrids')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-6\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [t('errorGeneratingGrids'), \": \", error]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }, this), !loading && generatedGrids.length > 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex justify-between items-center mb-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-xl font-semibold\",\n          children: t('generatedGrids')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex space-x-3\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => navigate('/saved-grids'),\n            className: \"px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700\",\n            children: t('viewSavedGrids')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\",\n        children: generatedGrids.map(grid => /*#__PURE__*/_jsxDEV(GridCard, {\n          grid: grid,\n          onSave: handleSave,\n          onPrint: handlePrint\n          // Indiquer visuellement si la grille a déjà été sauvegardée\n          ,\n          saved: savedGrids.includes(grid.id)\n        }, grid.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n};\n_s(GenerateGrid, \"y4yEGNzpXtNKRyX/o6jbkSo6nuU=\", false, function () {\n  return [useTranslation, useDispatch, useNavigate];\n});\n_c = GenerateGrid;\nexport default GenerateGrid;\nvar _c;\n$RefreshReg$(_c, \"GenerateGrid\");","map":{"version":3,"names":["React","useState","useEffect","useTranslation","useDispatch","useNavigate","GridGenerator","GridCard","generateGrids","printGrid","saveGrid","toast","jsxDEV","_jsxDEV","Fragment","_Fragment","GenerateGrid","_s","t","dispatch","navigate","generatedGrids","setGeneratedGrids","loading","setLoading","error","setError","savedGrids","setSavedGrids","generationModels","id","name","description","handleGenerate","options","result","err","message","console","handleSave","grid","includes","info","gridToSave","date","Date","toLocaleDateString","savedGrid","success","handlePrint","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onGenerate","models","length","onClick","map","onSave","onPrint","saved","_c","$RefreshReg$"],"sources":["C:/Users/Rga/euromillions-app/frontend/src/pages/GenerateGrid.js"],"sourcesContent":["// pages/GenerateGrid.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useNavigate } from 'react-router-dom'; // Import pour la redirection\r\nimport GridGenerator from '../components/grids/GridGenerator';\r\nimport GridCard from '../components/grids/GridCard';\r\nimport { generateGrids, printGrid } from '../services/gridService';\r\nimport { saveGrid } from '../redux/actions/gridActions';\r\nimport toast from '../utils/toast'; // Si vous utilisez react-toastify pour les notifications\r\n\r\nconst GenerateGrid = () => {\r\n  const { t } = useTranslation();\r\n  const dispatch = useDispatch();\r\n  const navigate = useNavigate();\r\n  const [generatedGrids, setGeneratedGrids] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [savedGrids, setSavedGrids] = useState([]); // Pour suivre les grilles déjà sauvegardées\r\n\r\n  const generationModels = [\r\n    {\r\n      id: 'random',\r\n      name: t('randomModel'),\r\n      description: t('randomModelDescription')\r\n    },\r\n    {\r\n      id: 'frequency',\r\n      name: t('frequencyModel'),\r\n      description: t('frequencyModelDescription')\r\n    },\r\n    {\r\n      id: 'hot_numbers',\r\n      name: t('hotNumbersModel'),\r\n      description: t('hotNumbersModelDescription')\r\n    },\r\n    // Autres modèles...\r\n  ];\r\n\r\n  const handleGenerate = async (options) => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      const result = await generateGrids(options);\r\n      setGeneratedGrids(result);\r\n      // Réinitialiser les grilles sauvegardées lors d'une nouvelle génération\r\n      setSavedGrids([]);\r\n    } catch (err) {\r\n      setError(err.message || t('generationError'));\r\n      console.error('Error generating grids:', err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleSave = async (grid) => {\r\n    try {\r\n      // Vérifier si la grille a déjà été sauvegardée\r\n      if (savedGrids.includes(grid.id)) {\r\n        toast.info(t('gridAlreadySaved'));\r\n        return;\r\n      }\r\n\r\n      // Ajouter un nom par défaut si nécessaire\r\n      const gridToSave = {\r\n        ...grid,\r\n        name: grid.name || t('gridGeneratedOn', { date: new Date().toLocaleDateString() })\r\n      };\r\n\r\n      const savedGrid = await dispatch(saveGrid(gridToSave));\r\n      \r\n      // Ajouter l'ID à la liste des grilles sauvegardées\r\n      setSavedGrids([...savedGrids, grid.id]);\r\n      \r\n      toast.success(t('gridSavedSuccessfully'));\r\n      \r\n      // Option: rediriger vers la page des grilles sauvegardées\r\n      // navigate('/saved-grids');\r\n    } catch (err) {\r\n      toast.error(t('errorSavingGrid'));\r\n      console.error('Error saving grid:', err);\r\n    }\r\n  };\r\n\r\n  const handlePrint = (grid) => {\r\n    printGrid(grid);\r\n  };\r\n\r\n  return (\r\n    <div className=\"container mx-auto px-4 py-8\">\r\n      <h1 className=\"text-2xl font-bold mb-6\">{t('generateGrids')}</h1>\r\n      \r\n      <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6 mb-8\">\r\n        <h2 className=\"text-xl font-semibold mb-4\">{t('gridGenerationOptions')}</h2>\r\n        <GridGenerator onGenerate={handleGenerate} models={generationModels} />\r\n      </div>\r\n      \r\n      {loading && (\r\n        <div className=\"text-center py-8\">\r\n          <div className=\"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500 mx-auto\"></div>\r\n          <p className=\"mt-4\">{t('generatingGrids')}</p>\r\n        </div>\r\n      )}\r\n      \r\n      {error && (\r\n        <div className=\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-6\">\r\n          <p>{t('errorGeneratingGrids')}: {error}</p>\r\n        </div>\r\n      )}\r\n      \r\n      {!loading && generatedGrids.length > 0 && (\r\n        <>\r\n          <div className=\"flex justify-between items-center mb-4\">\r\n            <h2 className=\"text-xl font-semibold\">{t('generatedGrids')}</h2>\r\n            \r\n            <div className=\"flex space-x-3\">\r\n              <button \r\n                onClick={() => navigate('/saved-grids')}\r\n                className=\"px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700\"\r\n              >\r\n                {t('viewSavedGrids')}\r\n              </button>\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\r\n            {generatedGrids.map((grid) => (\r\n              <GridCard\r\n                key={grid.id}\r\n                grid={grid}\r\n                onSave={handleSave}\r\n                onPrint={handlePrint}\r\n                // Indiquer visuellement si la grille a déjà été sauvegardée\r\n                saved={savedGrids.includes(grid.id)}\r\n              />\r\n            ))}\r\n          </div>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GenerateGrid;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}