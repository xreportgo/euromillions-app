{"ast":null,"code":"// src/services/updateService.js\nimport axios from 'axios';\n\n// Configuration pour l'API\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3000/api';\n\n/**\r\n * Vérifie si une mise à jour de l'application est disponible\r\n * @returns {Promise<boolean>} true si une mise à jour est disponible, false sinon\r\n */\nexport const checkForUpdates = async () => {\n  try {\n    // En environnement de production, vérifier avec le serveur\n    if (process.env.NODE_ENV === 'production') {\n      const response = await axios.get(`${API_BASE_URL}/version`);\n      const currentVersion = process.env.REACT_APP_VERSION || '1.0.0';\n      return response.data.version !== currentVersion;\n    }\n\n    // En développement, simuler qu'il n'y a pas de mise à jour\n    return false;\n  } catch (error) {\n    console.error('Erreur lors de la vérification des mises à jour:', error);\n    // En cas d'erreur, on considère qu'il n'y a pas de mise à jour\n    return false;\n  }\n};\n\n/**\r\n * Récupère les notes de version de la dernière mise à jour\r\n * @returns {Promise<Object>} Les informations de la dernière version\r\n */\nexport const getVersionInfo = async () => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/version/info`);\n    return response.data;\n  } catch (error) {\n    console.error('Erreur lors de la récupération des informations de version:', error);\n    throw new Error('Impossible de récupérer les informations de version');\n  }\n};\n\n/**\r\n * Applique les mises à jour disponibles (rafraîchit la page)\r\n * @returns {void}\r\n */\nexport const applyUpdates = () => {\n  // Rafraîchir la page pour charger la nouvelle version\n  window.location.reload(true);\n};\nexport default {\n  checkForUpdates,\n  getVersionInfo,\n  applyUpdates\n};","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","checkForUpdates","NODE_ENV","response","get","currentVersion","REACT_APP_VERSION","data","version","error","console","getVersionInfo","Error","applyUpdates","window","location","reload"],"sources":["C:/Users/Rga/Desktop/HelloEuro/euromillions-app/frontend/src/services/updateService.js"],"sourcesContent":["// src/services/updateService.js\r\nimport axios from 'axios';\r\n\r\n// Configuration pour l'API\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3000/api';\r\n\r\n/**\r\n * Vérifie si une mise à jour de l'application est disponible\r\n * @returns {Promise<boolean>} true si une mise à jour est disponible, false sinon\r\n */\r\nexport const checkForUpdates = async () => {\r\n  try {\r\n    // En environnement de production, vérifier avec le serveur\r\n    if (process.env.NODE_ENV === 'production') {\r\n      const response = await axios.get(`${API_BASE_URL}/version`);\r\n      const currentVersion = process.env.REACT_APP_VERSION || '1.0.0';\r\n      return response.data.version !== currentVersion;\r\n    }\r\n    \r\n    // En développement, simuler qu'il n'y a pas de mise à jour\r\n    return false;\r\n  } catch (error) {\r\n    console.error('Erreur lors de la vérification des mises à jour:', error);\r\n    // En cas d'erreur, on considère qu'il n'y a pas de mise à jour\r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * Récupère les notes de version de la dernière mise à jour\r\n * @returns {Promise<Object>} Les informations de la dernière version\r\n */\r\nexport const getVersionInfo = async () => {\r\n  try {\r\n    const response = await axios.get(`${API_BASE_URL}/version/info`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Erreur lors de la récupération des informations de version:', error);\r\n    throw new Error('Impossible de récupérer les informations de version');\r\n  }\r\n};\r\n\r\n/**\r\n * Applique les mises à jour disponibles (rafraîchit la page)\r\n * @returns {void}\r\n */\r\nexport const applyUpdates = () => {\r\n  // Rafraîchir la page pour charger la nouvelle version\r\n  window.location.reload(true);\r\n};\r\n\r\nexport default {\r\n  checkForUpdates,\r\n  getVersionInfo,\r\n  applyUpdates\r\n};\r\n"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;;AAEjF;AACA;AACA;AACA;AACA,OAAO,MAAMC,eAAe,GAAG,MAAAA,CAAA,KAAY;EACzC,IAAI;IACF;IACA,IAAIH,OAAO,CAACC,GAAG,CAACG,QAAQ,KAAK,YAAY,EAAE;MACzC,MAAMC,QAAQ,GAAG,MAAMP,KAAK,CAACQ,GAAG,CAAC,GAAGP,YAAY,UAAU,CAAC;MAC3D,MAAMQ,cAAc,GAAGP,OAAO,CAACC,GAAG,CAACO,iBAAiB,IAAI,OAAO;MAC/D,OAAOH,QAAQ,CAACI,IAAI,CAACC,OAAO,KAAKH,cAAc;IACjD;;IAEA;IACA,OAAO,KAAK;EACd,CAAC,CAAC,OAAOI,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,kDAAkD,EAAEA,KAAK,CAAC;IACxE;IACA,OAAO,KAAK;EACd;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAME,cAAc,GAAG,MAAAA,CAAA,KAAY;EACxC,IAAI;IACF,MAAMR,QAAQ,GAAG,MAAMP,KAAK,CAACQ,GAAG,CAAC,GAAGP,YAAY,eAAe,CAAC;IAChE,OAAOM,QAAQ,CAACI,IAAI;EACtB,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,6DAA6D,EAAEA,KAAK,CAAC;IACnF,MAAM,IAAIG,KAAK,CAAC,qDAAqD,CAAC;EACxE;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAChC;EACAC,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC,IAAI,CAAC;AAC9B,CAAC;AAED,eAAe;EACbf,eAAe;EACfU,cAAc;EACdE;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}