{"ast":null,"code":"// frontend/src/utils/api.js - Correction\n\nimport axios from 'axios';\n\n// Création d'une instance axios avec configuration de base\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || '/api',\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n  }\n});\n\n// Intercepteur pour détecter les erreurs et les données suspectes\napi.interceptors.response.use(response => {\n  const url = response.config.url;\n  const data = response.data;\n\n  // Vérifier les données des tirages\n  if (url.includes('/draws/latest') || url.includes('/draws/')) {\n    if (data && data.date) {\n      const drawDate = new Date(data.date);\n      const today = new Date();\n\n      // Vérifier si la date du tirage est dans le futur (données fictives)\n      if (drawDate > today) {\n        console.error('⚠️ Données suspectes détectées: Date dans le futur:', data);\n        throw new Error('Données invalides détectées: date dans le futur');\n      }\n    }\n  }\n  return response;\n}, error => {\n  return Promise.reject(error);\n});\n\n// API des tirages\nexport const drawsApi = {\n  getAll: (page = 1, limit = 10) => api.get(`/draws?page=${page}&limit=${limit}`),\n  getLatest: () => api.get('/draws/latest'),\n  getById: id => api.get(`/draws/${id}`),\n  getByDate: date => api.get(`/draws/date/${date}`)\n};\n\n// API des prédictions\nexport const predictionsApi = {\n  generate: (method = 'frequency') => api.get(`/predictions?method=${method}`)\n};\n\n// API des statistiques\nexport const statsApi = {\n  getGeneral: () => api.get('/stats'),\n  getNumberFrequencies: () => api.get('/stats/numbers'),\n  getStarFrequencies: () => api.get('/stats/stars'),\n  getIntervalStats: () => api.get('/stats/intervals')\n};\nexport default {\n  draws: drawsApi,\n  predictions: predictionsApi,\n  stats: statsApi\n};","map":{"version":3,"names":["axios","api","create","baseURL","process","env","REACT_APP_API_URL","timeout","headers","interceptors","response","use","url","config","data","includes","date","drawDate","Date","today","console","error","Error","Promise","reject","drawsApi","getAll","page","limit","get","getLatest","getById","id","getByDate","predictionsApi","generate","method","statsApi","getGeneral","getNumberFrequencies","getStarFrequencies","getIntervalStats","draws","predictions","stats"],"sources":["C:/Users/Rga/Desktop/HelloEuro/euromillions-app/frontend/src/utils/api.js"],"sourcesContent":["// frontend/src/utils/api.js - Correction\r\n\r\nimport axios from 'axios';\r\n\r\n// Création d'une instance axios avec configuration de base\r\nconst api = axios.create({\r\n  baseURL: process.env.REACT_APP_API_URL || '/api',\r\n  timeout: 10000,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n    'Accept': 'application/json'\r\n  }\r\n});\r\n\r\n// Intercepteur pour détecter les erreurs et les données suspectes\r\napi.interceptors.response.use(\r\n  response => {\r\n    const url = response.config.url;\r\n    const data = response.data;\r\n    \r\n    // Vérifier les données des tirages\r\n    if (url.includes('/draws/latest') || url.includes('/draws/')) {\r\n      if (data && data.date) {\r\n        const drawDate = new Date(data.date);\r\n        const today = new Date();\r\n        \r\n        // Vérifier si la date du tirage est dans le futur (données fictives)\r\n        if (drawDate > today) {\r\n          console.error('⚠️ Données suspectes détectées: Date dans le futur:', data);\r\n          throw new Error('Données invalides détectées: date dans le futur');\r\n        }\r\n      }\r\n    }\r\n    \r\n    return response;\r\n  },\r\n  error => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// API des tirages\r\nexport const drawsApi = {\r\n  getAll: (page = 1, limit = 10) => api.get(`/draws?page=${page}&limit=${limit}`),\r\n  getLatest: () => api.get('/draws/latest'),\r\n  getById: (id) => api.get(`/draws/${id}`),\r\n  getByDate: (date) => api.get(`/draws/date/${date}`)\r\n};\r\n\r\n// API des prédictions\r\nexport const predictionsApi = {\r\n  generate: (method = 'frequency') => api.get(`/predictions?method=${method}`)\r\n};\r\n\r\n// API des statistiques\r\nexport const statsApi = {\r\n  getGeneral: () => api.get('/stats'),\r\n  getNumberFrequencies: () => api.get('/stats/numbers'),\r\n  getStarFrequencies: () => api.get('/stats/stars'),\r\n  getIntervalStats: () => api.get('/stats/intervals')\r\n};\r\n\r\nexport default {\r\n  draws: drawsApi,\r\n  predictions: predictionsApi,\r\n  stats: statsApi\r\n};\r\n"],"mappings":"AAAA;;AAEA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACvBC,OAAO,EAAEC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,MAAM;EAChDC,OAAO,EAAE,KAAK;EACdC,OAAO,EAAE;IACP,cAAc,EAAE,kBAAkB;IAClC,QAAQ,EAAE;EACZ;AACF,CAAC,CAAC;;AAEF;AACAP,GAAG,CAACQ,YAAY,CAACC,QAAQ,CAACC,GAAG,CAC3BD,QAAQ,IAAI;EACV,MAAME,GAAG,GAAGF,QAAQ,CAACG,MAAM,CAACD,GAAG;EAC/B,MAAME,IAAI,GAAGJ,QAAQ,CAACI,IAAI;;EAE1B;EACA,IAAIF,GAAG,CAACG,QAAQ,CAAC,eAAe,CAAC,IAAIH,GAAG,CAACG,QAAQ,CAAC,SAAS,CAAC,EAAE;IAC5D,IAAID,IAAI,IAAIA,IAAI,CAACE,IAAI,EAAE;MACrB,MAAMC,QAAQ,GAAG,IAAIC,IAAI,CAACJ,IAAI,CAACE,IAAI,CAAC;MACpC,MAAMG,KAAK,GAAG,IAAID,IAAI,CAAC,CAAC;;MAExB;MACA,IAAID,QAAQ,GAAGE,KAAK,EAAE;QACpBC,OAAO,CAACC,KAAK,CAAC,qDAAqD,EAAEP,IAAI,CAAC;QAC1E,MAAM,IAAIQ,KAAK,CAAC,iDAAiD,CAAC;MACpE;IACF;EACF;EAEA,OAAOZ,QAAQ;AACjB,CAAC,EACDW,KAAK,IAAI;EACP,OAAOE,OAAO,CAACC,MAAM,CAACH,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACA,OAAO,MAAMI,QAAQ,GAAG;EACtBC,MAAM,EAAEA,CAACC,IAAI,GAAG,CAAC,EAAEC,KAAK,GAAG,EAAE,KAAK3B,GAAG,CAAC4B,GAAG,CAAC,eAAeF,IAAI,UAAUC,KAAK,EAAE,CAAC;EAC/EE,SAAS,EAAEA,CAAA,KAAM7B,GAAG,CAAC4B,GAAG,CAAC,eAAe,CAAC;EACzCE,OAAO,EAAGC,EAAE,IAAK/B,GAAG,CAAC4B,GAAG,CAAC,UAAUG,EAAE,EAAE,CAAC;EACxCC,SAAS,EAAGjB,IAAI,IAAKf,GAAG,CAAC4B,GAAG,CAAC,eAAeb,IAAI,EAAE;AACpD,CAAC;;AAED;AACA,OAAO,MAAMkB,cAAc,GAAG;EAC5BC,QAAQ,EAAEA,CAACC,MAAM,GAAG,WAAW,KAAKnC,GAAG,CAAC4B,GAAG,CAAC,uBAAuBO,MAAM,EAAE;AAC7E,CAAC;;AAED;AACA,OAAO,MAAMC,QAAQ,GAAG;EACtBC,UAAU,EAAEA,CAAA,KAAMrC,GAAG,CAAC4B,GAAG,CAAC,QAAQ,CAAC;EACnCU,oBAAoB,EAAEA,CAAA,KAAMtC,GAAG,CAAC4B,GAAG,CAAC,gBAAgB,CAAC;EACrDW,kBAAkB,EAAEA,CAAA,KAAMvC,GAAG,CAAC4B,GAAG,CAAC,cAAc,CAAC;EACjDY,gBAAgB,EAAEA,CAAA,KAAMxC,GAAG,CAAC4B,GAAG,CAAC,kBAAkB;AACpD,CAAC;AAED,eAAe;EACba,KAAK,EAAEjB,QAAQ;EACfkB,WAAW,EAAET,cAAc;EAC3BU,KAAK,EAAEP;AACT,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}